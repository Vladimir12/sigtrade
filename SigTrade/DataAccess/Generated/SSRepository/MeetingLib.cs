using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSSRepository
{
	/// <summary>
	/// Strongly-typed collection for the MeetingLib class.
	/// </summary>
    [Serializable]
	public partial class MeetingLibCollection : RepositoryList<MeetingLib, MeetingLibCollection>
	{	   
		public MeetingLibCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>MeetingLibCollection</returns>
		public MeetingLibCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                MeetingLib o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tblMeetingLib table.
	/// </summary>
	[Serializable]
	public partial class MeetingLib : RepositoryRecord<MeetingLib>, IRecordBase
	{
		#region .ctors and Default Settings
		
		public MeetingLib()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public MeetingLib(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tblMeetingLib", TableType.Table, DataService.GetInstance("SSRepository"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMeetingLibID = new TableSchema.TableColumn(schema);
				colvarMeetingLibID.ColumnName = "MeetingLibID";
				colvarMeetingLibID.DataType = DbType.Int32;
				colvarMeetingLibID.MaxLength = 0;
				colvarMeetingLibID.AutoIncrement = true;
				colvarMeetingLibID.IsNullable = false;
				colvarMeetingLibID.IsPrimaryKey = true;
				colvarMeetingLibID.IsForeignKey = false;
				colvarMeetingLibID.IsReadOnly = false;
				colvarMeetingLibID.DefaultSetting = @"";
				colvarMeetingLibID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingLibID);
				
				TableSchema.TableColumn colvarMeetingLibNumber = new TableSchema.TableColumn(schema);
				colvarMeetingLibNumber.ColumnName = "MeetingLibNumber";
				colvarMeetingLibNumber.DataType = DbType.AnsiString;
				colvarMeetingLibNumber.MaxLength = 50;
				colvarMeetingLibNumber.AutoIncrement = false;
				colvarMeetingLibNumber.IsNullable = false;
				colvarMeetingLibNumber.IsPrimaryKey = false;
				colvarMeetingLibNumber.IsForeignKey = false;
				colvarMeetingLibNumber.IsReadOnly = false;
				colvarMeetingLibNumber.DefaultSetting = @"";
				colvarMeetingLibNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingLibNumber);
				
				TableSchema.TableColumn colvarMeetingLibDesc = new TableSchema.TableColumn(schema);
				colvarMeetingLibDesc.ColumnName = "MeetingLibDesc";
				colvarMeetingLibDesc.DataType = DbType.AnsiString;
				colvarMeetingLibDesc.MaxLength = 100;
				colvarMeetingLibDesc.AutoIncrement = false;
				colvarMeetingLibDesc.IsNullable = true;
				colvarMeetingLibDesc.IsPrimaryKey = false;
				colvarMeetingLibDesc.IsForeignKey = false;
				colvarMeetingLibDesc.IsReadOnly = false;
				colvarMeetingLibDesc.DefaultSetting = @"";
				colvarMeetingLibDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingLibDesc);
				
				TableSchema.TableColumn colvarMeetingLibDate = new TableSchema.TableColumn(schema);
				colvarMeetingLibDate.ColumnName = "MeetingLibDate";
				colvarMeetingLibDate.DataType = DbType.DateTime;
				colvarMeetingLibDate.MaxLength = 0;
				colvarMeetingLibDate.AutoIncrement = false;
				colvarMeetingLibDate.IsNullable = true;
				colvarMeetingLibDate.IsPrimaryKey = false;
				colvarMeetingLibDate.IsForeignKey = false;
				colvarMeetingLibDate.IsReadOnly = false;
				colvarMeetingLibDate.DefaultSetting = @"";
				colvarMeetingLibDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingLibDate);
				
				TableSchema.TableColumn colvarDateAdded = new TableSchema.TableColumn(schema);
				colvarDateAdded.ColumnName = "DateAdded";
				colvarDateAdded.DataType = DbType.DateTime;
				colvarDateAdded.MaxLength = 0;
				colvarDateAdded.AutoIncrement = false;
				colvarDateAdded.IsNullable = false;
				colvarDateAdded.IsPrimaryKey = false;
				colvarDateAdded.IsForeignKey = false;
				colvarDateAdded.IsReadOnly = false;
				colvarDateAdded.DefaultSetting = @"";
				colvarDateAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateAdded);
				
				TableSchema.TableColumn colvarDateModified = new TableSchema.TableColumn(schema);
				colvarDateModified.ColumnName = "DateModified";
				colvarDateModified.DataType = DbType.DateTime;
				colvarDateModified.MaxLength = 0;
				colvarDateModified.AutoIncrement = false;
				colvarDateModified.IsNullable = true;
				colvarDateModified.IsPrimaryKey = false;
				colvarDateModified.IsForeignKey = false;
				colvarDateModified.IsReadOnly = false;
				colvarDateModified.DefaultSetting = @"";
				colvarDateModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateModified);
				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Boolean;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = false;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
						colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SSRepository"].AddSchema("tblMeetingLib",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MeetingLibID")]
		[Bindable(true)]
		public int MeetingLibID 
		{
			get { return GetColumnValue<int>(Columns.MeetingLibID); }
			set { SetColumnValue(Columns.MeetingLibID, value); }
		}
		  
		[XmlAttribute("MeetingLibNumber")]
		[Bindable(true)]
		public string MeetingLibNumber 
		{
			get { return GetColumnValue<string>(Columns.MeetingLibNumber); }
			set { SetColumnValue(Columns.MeetingLibNumber, value); }
		}
		  
		[XmlAttribute("MeetingLibDesc")]
		[Bindable(true)]
		public string MeetingLibDesc 
		{
			get { return GetColumnValue<string>(Columns.MeetingLibDesc); }
			set { SetColumnValue(Columns.MeetingLibDesc, value); }
		}
		  
		[XmlAttribute("MeetingLibDate")]
		[Bindable(true)]
		public DateTime? MeetingLibDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.MeetingLibDate); }
			set { SetColumnValue(Columns.MeetingLibDate, value); }
		}
		  
		[XmlAttribute("DateAdded")]
		[Bindable(true)]
		public DateTime DateAdded 
		{
			get { return GetColumnValue<DateTime>(Columns.DateAdded); }
			set { SetColumnValue(Columns.DateAdded, value); }
		}
		  
		[XmlAttribute("DateModified")]
		[Bindable(true)]
		public DateTime? DateModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateModified); }
			set { SetColumnValue(Columns.DateModified, value); }
		}
		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public bool Deleted 
		{
			get { return GetColumnValue<bool>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MeetingLibIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MeetingLibNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MeetingLibDescColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MeetingLibDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DateAddedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DateModifiedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MeetingLibID = @"MeetingLibID";
			 public static string MeetingLibNumber = @"MeetingLibNumber";
			 public static string MeetingLibDesc = @"MeetingLibDesc";
			 public static string MeetingLibDate = @"MeetingLibDate";
			 public static string DateAdded = @"DateAdded";
			 public static string DateModified = @"DateModified";
			 public static string Deleted = @"Deleted";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
