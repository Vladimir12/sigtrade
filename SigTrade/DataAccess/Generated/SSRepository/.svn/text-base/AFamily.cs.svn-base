using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSSRepository
{
	/// <summary>
	/// Strongly-typed collection for the AFamily class.
	/// </summary>
    [Serializable]
	public partial class AFamilyCollection : RepositoryList<AFamily, AFamilyCollection>
	{	   
		public AFamilyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AFamilyCollection</returns>
		public AFamilyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                AFamily o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the AFamily table.
	/// </summary>
	[Serializable]
	public partial class AFamily : RepositoryRecord<AFamily>, IRecordBase
	{
		#region .ctors and Default Settings
		
		public AFamily()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public AFamily(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AFamily", TableType.Table, DataService.GetInstance("SSRepository"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFamRecID = new TableSchema.TableColumn(schema);
				colvarFamRecID.ColumnName = "FamRecID";
				colvarFamRecID.DataType = DbType.Int32;
				colvarFamRecID.MaxLength = 0;
				colvarFamRecID.AutoIncrement = false;
				colvarFamRecID.IsNullable = false;
				colvarFamRecID.IsPrimaryKey = true;
				colvarFamRecID.IsForeignKey = false;
				colvarFamRecID.IsReadOnly = false;
				colvarFamRecID.DefaultSetting = @"";
				colvarFamRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamRecID);
				
				TableSchema.TableColumn colvarFamOrdRecID = new TableSchema.TableColumn(schema);
				colvarFamOrdRecID.ColumnName = "FamOrdRecID";
				colvarFamOrdRecID.DataType = DbType.Int32;
				colvarFamOrdRecID.MaxLength = 0;
				colvarFamOrdRecID.AutoIncrement = false;
				colvarFamOrdRecID.IsNullable = true;
				colvarFamOrdRecID.IsPrimaryKey = false;
				colvarFamOrdRecID.IsForeignKey = false;
				colvarFamOrdRecID.IsReadOnly = false;
				colvarFamOrdRecID.DefaultSetting = @"";
				colvarFamOrdRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamOrdRecID);
				
				TableSchema.TableColumn colvarFamName = new TableSchema.TableColumn(schema);
				colvarFamName.ColumnName = "FamName";
				colvarFamName.DataType = DbType.String;
				colvarFamName.MaxLength = 50;
				colvarFamName.AutoIncrement = false;
				colvarFamName.IsNullable = true;
				colvarFamName.IsPrimaryKey = false;
				colvarFamName.IsForeignKey = false;
				colvarFamName.IsReadOnly = false;
				colvarFamName.DefaultSetting = @"";
				colvarFamName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamName);
				
				TableSchema.TableColumn colvarFamAuthor = new TableSchema.TableColumn(schema);
				colvarFamAuthor.ColumnName = "FamAuthor";
				colvarFamAuthor.DataType = DbType.String;
				colvarFamAuthor.MaxLength = 50;
				colvarFamAuthor.AutoIncrement = false;
				colvarFamAuthor.IsNullable = true;
				colvarFamAuthor.IsPrimaryKey = false;
				colvarFamAuthor.IsForeignKey = false;
				colvarFamAuthor.IsReadOnly = false;
				colvarFamAuthor.DefaultSetting = @"";
				colvarFamAuthor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamAuthor);
				
				TableSchema.TableColumn colvarFamSortCodeEU = new TableSchema.TableColumn(schema);
				colvarFamSortCodeEU.ColumnName = "FamSortCodeEU";
				colvarFamSortCodeEU.DataType = DbType.Single;
				colvarFamSortCodeEU.MaxLength = 0;
				colvarFamSortCodeEU.AutoIncrement = false;
				colvarFamSortCodeEU.IsNullable = true;
				colvarFamSortCodeEU.IsPrimaryKey = false;
				colvarFamSortCodeEU.IsForeignKey = false;
				colvarFamSortCodeEU.IsReadOnly = false;
				colvarFamSortCodeEU.DefaultSetting = @"";
				colvarFamSortCodeEU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamSortCodeEU);
				
				TableSchema.TableColumn colvarFamSortCodeRL = new TableSchema.TableColumn(schema);
				colvarFamSortCodeRL.ColumnName = "FamSortCodeRL";
				colvarFamSortCodeRL.DataType = DbType.Single;
				colvarFamSortCodeRL.MaxLength = 0;
				colvarFamSortCodeRL.AutoIncrement = false;
				colvarFamSortCodeRL.IsNullable = true;
				colvarFamSortCodeRL.IsPrimaryKey = false;
				colvarFamSortCodeRL.IsForeignKey = false;
				colvarFamSortCodeRL.IsReadOnly = false;
				colvarFamSortCodeRL.DefaultSetting = @"";
				colvarFamSortCodeRL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamSortCodeRL);
				
				TableSchema.TableColumn colvarFamOrder = new TableSchema.TableColumn(schema);
				colvarFamOrder.ColumnName = "FamOrder";
				colvarFamOrder.DataType = DbType.Int32;
				colvarFamOrder.MaxLength = 0;
				colvarFamOrder.AutoIncrement = false;
				colvarFamOrder.IsNullable = true;
				colvarFamOrder.IsPrimaryKey = false;
				colvarFamOrder.IsForeignKey = false;
				colvarFamOrder.IsReadOnly = false;
				colvarFamOrder.DefaultSetting = @"";
				colvarFamOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamOrder);
				
				TableSchema.TableColumn colvarFamStatus = new TableSchema.TableColumn(schema);
				colvarFamStatus.ColumnName = "FamStatus";
				colvarFamStatus.DataType = DbType.String;
				colvarFamStatus.MaxLength = 1;
				colvarFamStatus.AutoIncrement = false;
				colvarFamStatus.IsNullable = true;
				colvarFamStatus.IsPrimaryKey = false;
				colvarFamStatus.IsForeignKey = false;
				colvarFamStatus.IsReadOnly = false;
				colvarFamStatus.DefaultSetting = @"";
				colvarFamStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamStatus);
				
				TableSchema.TableColumn colvarFamCommonName = new TableSchema.TableColumn(schema);
				colvarFamCommonName.ColumnName = "FamCommonName";
				colvarFamCommonName.DataType = DbType.String;
				colvarFamCommonName.MaxLength = 30;
				colvarFamCommonName.AutoIncrement = false;
				colvarFamCommonName.IsNullable = true;
				colvarFamCommonName.IsPrimaryKey = false;
				colvarFamCommonName.IsForeignKey = false;
				colvarFamCommonName.IsReadOnly = false;
				colvarFamCommonName.DefaultSetting = @"";
				colvarFamCommonName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamCommonName);
				
				TableSchema.TableColumn colvarFamNoGenera = new TableSchema.TableColumn(schema);
				colvarFamNoGenera.ColumnName = "FamNoGenera";
				colvarFamNoGenera.DataType = DbType.Int32;
				colvarFamNoGenera.MaxLength = 0;
				colvarFamNoGenera.AutoIncrement = false;
				colvarFamNoGenera.IsNullable = true;
				colvarFamNoGenera.IsPrimaryKey = false;
				colvarFamNoGenera.IsForeignKey = false;
				colvarFamNoGenera.IsReadOnly = false;
				colvarFamNoGenera.DefaultSetting = @"";
				colvarFamNoGenera.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamNoGenera);
				
				TableSchema.TableColumn colvarFamCITESAppendix = new TableSchema.TableColumn(schema);
				colvarFamCITESAppendix.ColumnName = "FamCITESAppendix";
				colvarFamCITESAppendix.DataType = DbType.String;
				colvarFamCITESAppendix.MaxLength = 3;
				colvarFamCITESAppendix.AutoIncrement = false;
				colvarFamCITESAppendix.IsNullable = true;
				colvarFamCITESAppendix.IsPrimaryKey = false;
				colvarFamCITESAppendix.IsForeignKey = false;
				colvarFamCITESAppendix.IsReadOnly = false;
				colvarFamCITESAppendix.DefaultSetting = @"";
				colvarFamCITESAppendix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamCITESAppendix);
				
				TableSchema.TableColumn colvarFamDateListed = new TableSchema.TableColumn(schema);
				colvarFamDateListed.ColumnName = "FamDateListed";
				colvarFamDateListed.DataType = DbType.DateTime;
				colvarFamDateListed.MaxLength = 0;
				colvarFamDateListed.AutoIncrement = false;
				colvarFamDateListed.IsNullable = true;
				colvarFamDateListed.IsPrimaryKey = false;
				colvarFamDateListed.IsForeignKey = false;
				colvarFamDateListed.IsReadOnly = false;
				colvarFamDateListed.DefaultSetting = @"";
				colvarFamDateListed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamDateListed);
				
				TableSchema.TableColumn colvarFamAdded = new TableSchema.TableColumn(schema);
				colvarFamAdded.ColumnName = "FamAdded";
				colvarFamAdded.DataType = DbType.DateTime;
				colvarFamAdded.MaxLength = 0;
				colvarFamAdded.AutoIncrement = false;
				colvarFamAdded.IsNullable = true;
				colvarFamAdded.IsPrimaryKey = false;
				colvarFamAdded.IsForeignKey = false;
				colvarFamAdded.IsReadOnly = false;
				colvarFamAdded.DefaultSetting = @"";
				colvarFamAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamAdded);
				
				TableSchema.TableColumn colvarFamModified = new TableSchema.TableColumn(schema);
				colvarFamModified.ColumnName = "FamModified";
				colvarFamModified.DataType = DbType.DateTime;
				colvarFamModified.MaxLength = 0;
				colvarFamModified.AutoIncrement = false;
				colvarFamModified.IsNullable = true;
				colvarFamModified.IsPrimaryKey = false;
				colvarFamModified.IsForeignKey = false;
				colvarFamModified.IsReadOnly = false;
				colvarFamModified.DefaultSetting = @"";
				colvarFamModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamModified);
				
				TableSchema.TableColumn colvarFamByWho = new TableSchema.TableColumn(schema);
				colvarFamByWho.ColumnName = "FamByWho";
				colvarFamByWho.DataType = DbType.Int32;
				colvarFamByWho.MaxLength = 0;
				colvarFamByWho.AutoIncrement = false;
				colvarFamByWho.IsNullable = true;
				colvarFamByWho.IsPrimaryKey = false;
				colvarFamByWho.IsForeignKey = false;
				colvarFamByWho.IsReadOnly = false;
				colvarFamByWho.DefaultSetting = @"";
				colvarFamByWho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamByWho);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SSRepository"].AddSchema("AFamily",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FamRecID")]
		[Bindable(true)]
		public int FamRecID 
		{
			get { return GetColumnValue<int>(Columns.FamRecID); }
			set { SetColumnValue(Columns.FamRecID, value); }
		}
		  
		[XmlAttribute("FamOrdRecID")]
		[Bindable(true)]
		public int? FamOrdRecID 
		{
			get { return GetColumnValue<int?>(Columns.FamOrdRecID); }
			set { SetColumnValue(Columns.FamOrdRecID, value); }
		}
		  
		[XmlAttribute("FamName")]
		[Bindable(true)]
		public string FamName 
		{
			get { return GetColumnValue<string>(Columns.FamName); }
			set { SetColumnValue(Columns.FamName, value); }
		}
		  
		[XmlAttribute("FamAuthor")]
		[Bindable(true)]
		public string FamAuthor 
		{
			get { return GetColumnValue<string>(Columns.FamAuthor); }
			set { SetColumnValue(Columns.FamAuthor, value); }
		}
		  
		[XmlAttribute("FamSortCodeEU")]
		[Bindable(true)]
		public float? FamSortCodeEU 
		{
			get { return GetColumnValue<float?>(Columns.FamSortCodeEU); }
			set { SetColumnValue(Columns.FamSortCodeEU, value); }
		}
		  
		[XmlAttribute("FamSortCodeRL")]
		[Bindable(true)]
		public float? FamSortCodeRL 
		{
			get { return GetColumnValue<float?>(Columns.FamSortCodeRL); }
			set { SetColumnValue(Columns.FamSortCodeRL, value); }
		}
		  
		[XmlAttribute("FamOrder")]
		[Bindable(true)]
		public int? FamOrder 
		{
			get { return GetColumnValue<int?>(Columns.FamOrder); }
			set { SetColumnValue(Columns.FamOrder, value); }
		}
		  
		[XmlAttribute("FamStatus")]
		[Bindable(true)]
		public string FamStatus 
		{
			get { return GetColumnValue<string>(Columns.FamStatus); }
			set { SetColumnValue(Columns.FamStatus, value); }
		}
		  
		[XmlAttribute("FamCommonName")]
		[Bindable(true)]
		public string FamCommonName 
		{
			get { return GetColumnValue<string>(Columns.FamCommonName); }
			set { SetColumnValue(Columns.FamCommonName, value); }
		}
		  
		[XmlAttribute("FamNoGenera")]
		[Bindable(true)]
		public int? FamNoGenera 
		{
			get { return GetColumnValue<int?>(Columns.FamNoGenera); }
			set { SetColumnValue(Columns.FamNoGenera, value); }
		}
		  
		[XmlAttribute("FamCITESAppendix")]
		[Bindable(true)]
		public string FamCITESAppendix 
		{
			get { return GetColumnValue<string>(Columns.FamCITESAppendix); }
			set { SetColumnValue(Columns.FamCITESAppendix, value); }
		}
		  
		[XmlAttribute("FamDateListed")]
		[Bindable(true)]
		public DateTime? FamDateListed 
		{
			get { return GetColumnValue<DateTime?>(Columns.FamDateListed); }
			set { SetColumnValue(Columns.FamDateListed, value); }
		}
		  
		[XmlAttribute("FamAdded")]
		[Bindable(true)]
		public DateTime? FamAdded 
		{
			get { return GetColumnValue<DateTime?>(Columns.FamAdded); }
			set { SetColumnValue(Columns.FamAdded, value); }
		}
		  
		[XmlAttribute("FamModified")]
		[Bindable(true)]
		public DateTime? FamModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.FamModified); }
			set { SetColumnValue(Columns.FamModified, value); }
		}
		  
		[XmlAttribute("FamByWho")]
		[Bindable(true)]
		public int? FamByWho 
		{
			get { return GetColumnValue<int?>(Columns.FamByWho); }
			set { SetColumnValue(Columns.FamByWho, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FamRecIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FamOrdRecIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FamNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FamAuthorColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FamSortCodeEUColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FamSortCodeRLColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FamOrderColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FamStatusColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FamCommonNameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FamNoGeneraColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn FamCITESAppendixColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn FamDateListedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn FamAddedColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn FamModifiedColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FamByWhoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FamRecID = @"FamRecID";
			 public static string FamOrdRecID = @"FamOrdRecID";
			 public static string FamName = @"FamName";
			 public static string FamAuthor = @"FamAuthor";
			 public static string FamSortCodeEU = @"FamSortCodeEU";
			 public static string FamSortCodeRL = @"FamSortCodeRL";
			 public static string FamOrder = @"FamOrder";
			 public static string FamStatus = @"FamStatus";
			 public static string FamCommonName = @"FamCommonName";
			 public static string FamNoGenera = @"FamNoGenera";
			 public static string FamCITESAppendix = @"FamCITESAppendix";
			 public static string FamDateListed = @"FamDateListed";
			 public static string FamAdded = @"FamAdded";
			 public static string FamModified = @"FamModified";
			 public static string FamByWho = @"FamByWho";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
