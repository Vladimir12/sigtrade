using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSSRepository
{
	/// <summary>
	/// Strongly-typed collection for the ParagraphActionLib class.
	/// </summary>
    [Serializable]
	public partial class ParagraphActionLibCollection : RepositoryList<ParagraphActionLib, ParagraphActionLibCollection>
	{	   
		public ParagraphActionLibCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ParagraphActionLibCollection</returns>
		public ParagraphActionLibCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ParagraphActionLib o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ParagraphActionLib table.
	/// </summary>
	[Serializable]
	public partial class ParagraphActionLib : RepositoryRecord<ParagraphActionLib>, IRecordBase
	{
		#region .ctors and Default Settings
		
		public ParagraphActionLib()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ParagraphActionLib(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ParagraphActionLib", TableType.Table, DataService.GetInstance("SSRepository"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarParagraph = new TableSchema.TableColumn(schema);
				colvarParagraph.ColumnName = "Paragraph";
				colvarParagraph.DataType = DbType.AnsiString;
				colvarParagraph.MaxLength = 50;
				colvarParagraph.AutoIncrement = false;
				colvarParagraph.IsNullable = true;
				colvarParagraph.IsPrimaryKey = false;
				colvarParagraph.IsForeignKey = false;
				colvarParagraph.IsReadOnly = false;
				colvarParagraph.DefaultSetting = @"";
				colvarParagraph.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParagraph);
				
				TableSchema.TableColumn colvarActionOrder = new TableSchema.TableColumn(schema);
				colvarActionOrder.ColumnName = "ActionOrder";
				colvarActionOrder.DataType = DbType.AnsiString;
				colvarActionOrder.MaxLength = 10;
				colvarActionOrder.AutoIncrement = false;
				colvarActionOrder.IsNullable = true;
				colvarActionOrder.IsPrimaryKey = false;
				colvarActionOrder.IsForeignKey = false;
				colvarActionOrder.IsReadOnly = false;
				colvarActionOrder.DefaultSetting = @"";
				colvarActionOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionOrder);
				
				TableSchema.TableColumn colvarAction = new TableSchema.TableColumn(schema);
				colvarAction.ColumnName = "Action";
				colvarAction.DataType = DbType.AnsiString;
				colvarAction.MaxLength = 500;
				colvarAction.AutoIncrement = false;
				colvarAction.IsNullable = true;
				colvarAction.IsPrimaryKey = false;
				colvarAction.IsForeignKey = false;
				colvarAction.IsReadOnly = false;
				colvarAction.DefaultSetting = @"";
				colvarAction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAction);
				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Boolean;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = false;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
						colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				TableSchema.TableColumn colvarConcernRequired = new TableSchema.TableColumn(schema);
				colvarConcernRequired.ColumnName = "ConcernRequired";
				colvarConcernRequired.DataType = DbType.Boolean;
				colvarConcernRequired.MaxLength = 0;
				colvarConcernRequired.AutoIncrement = false;
				colvarConcernRequired.IsNullable = false;
				colvarConcernRequired.IsPrimaryKey = false;
				colvarConcernRequired.IsForeignKey = false;
				colvarConcernRequired.IsReadOnly = false;
				
						colvarConcernRequired.DefaultSetting = @"((0))";
				colvarConcernRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConcernRequired);
				
				TableSchema.TableColumn colvarRecommendations = new TableSchema.TableColumn(schema);
				colvarRecommendations.ColumnName = "Recommendations";
				colvarRecommendations.DataType = DbType.Boolean;
				colvarRecommendations.MaxLength = 0;
				colvarRecommendations.AutoIncrement = false;
				colvarRecommendations.IsNullable = false;
				colvarRecommendations.IsPrimaryKey = false;
				colvarRecommendations.IsForeignKey = false;
				colvarRecommendations.IsReadOnly = false;
				
						colvarRecommendations.DefaultSetting = @"((0))";
				colvarRecommendations.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecommendations);
				
				TableSchema.TableColumn colvarDecisions = new TableSchema.TableColumn(schema);
				colvarDecisions.ColumnName = "Decisions";
				colvarDecisions.DataType = DbType.Boolean;
				colvarDecisions.MaxLength = 0;
				colvarDecisions.AutoIncrement = false;
				colvarDecisions.IsNullable = false;
				colvarDecisions.IsPrimaryKey = false;
				colvarDecisions.IsForeignKey = false;
				colvarDecisions.IsReadOnly = false;
				
						colvarDecisions.DefaultSetting = @"((0))";
				colvarDecisions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisions);
				
				TableSchema.TableColumn colvarBranch = new TableSchema.TableColumn(schema);
				colvarBranch.ColumnName = "Branch";
				colvarBranch.DataType = DbType.Boolean;
				colvarBranch.MaxLength = 0;
				colvarBranch.AutoIncrement = false;
				colvarBranch.IsNullable = false;
				colvarBranch.IsPrimaryKey = false;
				colvarBranch.IsForeignKey = false;
				colvarBranch.IsReadOnly = false;
				
						colvarBranch.DefaultSetting = @"((0))";
				colvarBranch.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBranch);
				
				TableSchema.TableColumn colvarBranchLink = new TableSchema.TableColumn(schema);
				colvarBranchLink.ColumnName = "BranchLink";
				colvarBranchLink.DataType = DbType.AnsiString;
				colvarBranchLink.MaxLength = 10;
				colvarBranchLink.AutoIncrement = false;
				colvarBranchLink.IsNullable = true;
				colvarBranchLink.IsPrimaryKey = false;
				colvarBranchLink.IsForeignKey = false;
				colvarBranchLink.IsReadOnly = false;
				colvarBranchLink.DefaultSetting = @"";
				colvarBranchLink.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBranchLink);
				
				TableSchema.TableColumn colvarSequence = new TableSchema.TableColumn(schema);
				colvarSequence.ColumnName = "Sequence";
				colvarSequence.DataType = DbType.Int32;
				colvarSequence.MaxLength = 0;
				colvarSequence.AutoIncrement = false;
				colvarSequence.IsNullable = true;
				colvarSequence.IsPrimaryKey = false;
				colvarSequence.IsForeignKey = false;
				colvarSequence.IsReadOnly = false;
				colvarSequence.DefaultSetting = @"";
				colvarSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSequence);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarDeadlineDays = new TableSchema.TableColumn(schema);
				colvarDeadlineDays.ColumnName = "DeadlineDays";
				colvarDeadlineDays.DataType = DbType.Int32;
				colvarDeadlineDays.MaxLength = 0;
				colvarDeadlineDays.AutoIncrement = false;
				colvarDeadlineDays.IsNullable = false;
				colvarDeadlineDays.IsPrimaryKey = false;
				colvarDeadlineDays.IsForeignKey = false;
				colvarDeadlineDays.IsReadOnly = false;
				
						colvarDeadlineDays.DefaultSetting = @"((60))";
				colvarDeadlineDays.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeadlineDays);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SSRepository"].AddSchema("ParagraphActionLib",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Paragraph")]
		[Bindable(true)]
		public string Paragraph 
		{
			get { return GetColumnValue<string>(Columns.Paragraph); }
			set { SetColumnValue(Columns.Paragraph, value); }
		}
		  
		[XmlAttribute("ActionOrder")]
		[Bindable(true)]
		public string ActionOrder 
		{
			get { return GetColumnValue<string>(Columns.ActionOrder); }
			set { SetColumnValue(Columns.ActionOrder, value); }
		}
		  
		[XmlAttribute("Action")]
		[Bindable(true)]
		public string Action 
		{
			get { return GetColumnValue<string>(Columns.Action); }
			set { SetColumnValue(Columns.Action, value); }
		}
		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public bool Deleted 
		{
			get { return GetColumnValue<bool>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		  
		[XmlAttribute("ConcernRequired")]
		[Bindable(true)]
		public bool ConcernRequired 
		{
			get { return GetColumnValue<bool>(Columns.ConcernRequired); }
			set { SetColumnValue(Columns.ConcernRequired, value); }
		}
		  
		[XmlAttribute("Recommendations")]
		[Bindable(true)]
		public bool Recommendations 
		{
			get { return GetColumnValue<bool>(Columns.Recommendations); }
			set { SetColumnValue(Columns.Recommendations, value); }
		}
		  
		[XmlAttribute("Decisions")]
		[Bindable(true)]
		public bool Decisions 
		{
			get { return GetColumnValue<bool>(Columns.Decisions); }
			set { SetColumnValue(Columns.Decisions, value); }
		}
		  
		[XmlAttribute("Branch")]
		[Bindable(true)]
		public bool Branch 
		{
			get { return GetColumnValue<bool>(Columns.Branch); }
			set { SetColumnValue(Columns.Branch, value); }
		}
		  
		[XmlAttribute("BranchLink")]
		[Bindable(true)]
		public string BranchLink 
		{
			get { return GetColumnValue<string>(Columns.BranchLink); }
			set { SetColumnValue(Columns.BranchLink, value); }
		}
		  
		[XmlAttribute("Sequence")]
		[Bindable(true)]
		public int? Sequence 
		{
			get { return GetColumnValue<int?>(Columns.Sequence); }
			set { SetColumnValue(Columns.Sequence, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("DeadlineDays")]
		[Bindable(true)]
		public int DeadlineDays 
		{
			get { return GetColumnValue<int>(Columns.DeadlineDays); }
			set { SetColumnValue(Columns.DeadlineDays, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ParagraphColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ActionOrderColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ActionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ConcernRequiredColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RecommendationsColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DecisionsColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchLinkColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SequenceColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DeadlineDaysColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Paragraph = @"Paragraph";
			 public static string ActionOrder = @"ActionOrder";
			 public static string Action = @"Action";
			 public static string Deleted = @"Deleted";
			 public static string ConcernRequired = @"ConcernRequired";
			 public static string Recommendations = @"Recommendations";
			 public static string Decisions = @"Decisions";
			 public static string Branch = @"Branch";
			 public static string BranchLink = @"BranchLink";
			 public static string Sequence = @"Sequence";
			 public static string Description = @"Description";
			 public static string DeadlineDays = @"DeadlineDays";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
