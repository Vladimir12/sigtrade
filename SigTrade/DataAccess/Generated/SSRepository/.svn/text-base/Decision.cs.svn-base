using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSSRepository
{
	/// <summary>
	/// Strongly-typed collection for the Decision class.
	/// </summary>
    [Serializable]
	public partial class DecisionCollection : RepositoryList<Decision, DecisionCollection>
	{	   
		public DecisionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DecisionCollection</returns>
		public DecisionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Decision o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Decisions table.
	/// </summary>
	[Serializable]
	public partial class Decision : RepositoryRecord<Decision>, IRecordBase
	{
		#region .ctors and Default Settings
		
		public Decision()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Decision(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Decisions", TableType.Table, DataService.GetInstance("SSRepository"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarParagraphActionID = new TableSchema.TableColumn(schema);
				colvarParagraphActionID.ColumnName = "ParagraphActionID";
				colvarParagraphActionID.DataType = DbType.Int32;
				colvarParagraphActionID.MaxLength = 0;
				colvarParagraphActionID.AutoIncrement = false;
				colvarParagraphActionID.IsNullable = true;
				colvarParagraphActionID.IsPrimaryKey = false;
				colvarParagraphActionID.IsForeignKey = false;
				colvarParagraphActionID.IsReadOnly = false;
				colvarParagraphActionID.DefaultSetting = @"";
				colvarParagraphActionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParagraphActionID);
				
				TableSchema.TableColumn colvarDecisionType = new TableSchema.TableColumn(schema);
				colvarDecisionType.ColumnName = "DecisionType";
				colvarDecisionType.DataType = DbType.Int32;
				colvarDecisionType.MaxLength = 0;
				colvarDecisionType.AutoIncrement = false;
				colvarDecisionType.IsNullable = true;
				colvarDecisionType.IsPrimaryKey = false;
				colvarDecisionType.IsForeignKey = false;
				colvarDecisionType.IsReadOnly = false;
				colvarDecisionType.DefaultSetting = @"";
				colvarDecisionType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionType);
				
				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.AnsiString;
				colvarNotes.MaxLength = -1;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);
				
				TableSchema.TableColumn colvarSuspensionDate = new TableSchema.TableColumn(schema);
				colvarSuspensionDate.ColumnName = "SuspensionDate";
				colvarSuspensionDate.DataType = DbType.DateTime;
				colvarSuspensionDate.MaxLength = 0;
				colvarSuspensionDate.AutoIncrement = false;
				colvarSuspensionDate.IsNullable = true;
				colvarSuspensionDate.IsPrimaryKey = false;
				colvarSuspensionDate.IsForeignKey = false;
				colvarSuspensionDate.IsReadOnly = false;
				colvarSuspensionDate.DefaultSetting = @"";
				colvarSuspensionDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuspensionDate);
				
				TableSchema.TableColumn colvarTradeTerms = new TableSchema.TableColumn(schema);
				colvarTradeTerms.ColumnName = "TradeTerms";
				colvarTradeTerms.DataType = DbType.Int32;
				colvarTradeTerms.MaxLength = 0;
				colvarTradeTerms.AutoIncrement = false;
				colvarTradeTerms.IsNullable = true;
				colvarTradeTerms.IsPrimaryKey = false;
				colvarTradeTerms.IsForeignKey = false;
				colvarTradeTerms.IsReadOnly = false;
				colvarTradeTerms.DefaultSetting = @"";
				colvarTradeTerms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTradeTerms);
				
				TableSchema.TableColumn colvarSuspensionCommitteeID = new TableSchema.TableColumn(schema);
				colvarSuspensionCommitteeID.ColumnName = "SuspensionCommitteeID";
				colvarSuspensionCommitteeID.DataType = DbType.Int32;
				colvarSuspensionCommitteeID.MaxLength = 0;
				colvarSuspensionCommitteeID.AutoIncrement = false;
				colvarSuspensionCommitteeID.IsNullable = true;
				colvarSuspensionCommitteeID.IsPrimaryKey = false;
				colvarSuspensionCommitteeID.IsForeignKey = false;
				colvarSuspensionCommitteeID.IsReadOnly = false;
				colvarSuspensionCommitteeID.DefaultSetting = @"";
				colvarSuspensionCommitteeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuspensionCommitteeID);
				
				TableSchema.TableColumn colvarSuspensionLiftDate = new TableSchema.TableColumn(schema);
				colvarSuspensionLiftDate.ColumnName = "SuspensionLiftDate";
				colvarSuspensionLiftDate.DataType = DbType.DateTime;
				colvarSuspensionLiftDate.MaxLength = 0;
				colvarSuspensionLiftDate.AutoIncrement = false;
				colvarSuspensionLiftDate.IsNullable = true;
				colvarSuspensionLiftDate.IsPrimaryKey = false;
				colvarSuspensionLiftDate.IsForeignKey = false;
				colvarSuspensionLiftDate.IsReadOnly = false;
				colvarSuspensionLiftDate.DefaultSetting = @"";
				colvarSuspensionLiftDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuspensionLiftDate);
				
				TableSchema.TableColumn colvarLigftingCommitteeID = new TableSchema.TableColumn(schema);
				colvarLigftingCommitteeID.ColumnName = "LigftingCommitteeID";
				colvarLigftingCommitteeID.DataType = DbType.Int32;
				colvarLigftingCommitteeID.MaxLength = 0;
				colvarLigftingCommitteeID.AutoIncrement = false;
				colvarLigftingCommitteeID.IsNullable = true;
				colvarLigftingCommitteeID.IsPrimaryKey = false;
				colvarLigftingCommitteeID.IsForeignKey = false;
				colvarLigftingCommitteeID.IsReadOnly = false;
				colvarLigftingCommitteeID.DefaultSetting = @"";
				colvarLigftingCommitteeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLigftingCommitteeID);
				
				TableSchema.TableColumn colvarAddedDate = new TableSchema.TableColumn(schema);
				colvarAddedDate.ColumnName = "AddedDate";
				colvarAddedDate.DataType = DbType.DateTime;
				colvarAddedDate.MaxLength = 0;
				colvarAddedDate.AutoIncrement = false;
				colvarAddedDate.IsNullable = true;
				colvarAddedDate.IsPrimaryKey = false;
				colvarAddedDate.IsForeignKey = false;
				colvarAddedDate.IsReadOnly = false;
				colvarAddedDate.DefaultSetting = @"";
				colvarAddedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddedDate);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Boolean;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = true;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
						colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				TableSchema.TableColumn colvarDeletedDate = new TableSchema.TableColumn(schema);
				colvarDeletedDate.ColumnName = "DeletedDate";
				colvarDeletedDate.DataType = DbType.DateTime;
				colvarDeletedDate.MaxLength = 0;
				colvarDeletedDate.AutoIncrement = false;
				colvarDeletedDate.IsNullable = true;
				colvarDeletedDate.IsPrimaryKey = false;
				colvarDeletedDate.IsForeignKey = false;
				colvarDeletedDate.IsReadOnly = false;
				colvarDeletedDate.DefaultSetting = @"";
				colvarDeletedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeletedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SSRepository"].AddSchema("Decisions",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ParagraphActionID")]
		[Bindable(true)]
		public int? ParagraphActionID 
		{
			get { return GetColumnValue<int?>(Columns.ParagraphActionID); }
			set { SetColumnValue(Columns.ParagraphActionID, value); }
		}
		  
		[XmlAttribute("DecisionType")]
		[Bindable(true)]
		public int? DecisionType 
		{
			get { return GetColumnValue<int?>(Columns.DecisionType); }
			set { SetColumnValue(Columns.DecisionType, value); }
		}
		  
		[XmlAttribute("Notes")]
		[Bindable(true)]
		public string Notes 
		{
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		  
		[XmlAttribute("SuspensionDate")]
		[Bindable(true)]
		public DateTime? SuspensionDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.SuspensionDate); }
			set { SetColumnValue(Columns.SuspensionDate, value); }
		}
		  
		[XmlAttribute("TradeTerms")]
		[Bindable(true)]
		public int? TradeTerms 
		{
			get { return GetColumnValue<int?>(Columns.TradeTerms); }
			set { SetColumnValue(Columns.TradeTerms, value); }
		}
		  
		[XmlAttribute("SuspensionCommitteeID")]
		[Bindable(true)]
		public int? SuspensionCommitteeID 
		{
			get { return GetColumnValue<int?>(Columns.SuspensionCommitteeID); }
			set { SetColumnValue(Columns.SuspensionCommitteeID, value); }
		}
		  
		[XmlAttribute("SuspensionLiftDate")]
		[Bindable(true)]
		public DateTime? SuspensionLiftDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.SuspensionLiftDate); }
			set { SetColumnValue(Columns.SuspensionLiftDate, value); }
		}
		  
		[XmlAttribute("LigftingCommitteeID")]
		[Bindable(true)]
		public int? LigftingCommitteeID 
		{
			get { return GetColumnValue<int?>(Columns.LigftingCommitteeID); }
			set { SetColumnValue(Columns.LigftingCommitteeID, value); }
		}
		  
		[XmlAttribute("AddedDate")]
		[Bindable(true)]
		public DateTime? AddedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.AddedDate); }
			set { SetColumnValue(Columns.AddedDate, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public bool? Deleted 
		{
			get { return GetColumnValue<bool?>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		  
		[XmlAttribute("DeletedDate")]
		[Bindable(true)]
		public DateTime? DeletedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeletedDate); }
			set { SetColumnValue(Columns.DeletedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ParagraphActionIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DecisionTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NotesColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SuspensionDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TradeTermsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SuspensionCommitteeIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SuspensionLiftDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LigftingCommitteeIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AddedDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ParagraphActionID = @"ParagraphActionID";
			 public static string DecisionType = @"DecisionType";
			 public static string Notes = @"Notes";
			 public static string SuspensionDate = @"SuspensionDate";
			 public static string TradeTerms = @"TradeTerms";
			 public static string SuspensionCommitteeID = @"SuspensionCommitteeID";
			 public static string SuspensionLiftDate = @"SuspensionLiftDate";
			 public static string LigftingCommitteeID = @"LigftingCommitteeID";
			 public static string AddedDate = @"AddedDate";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string Deleted = @"Deleted";
			 public static string DeletedDate = @"DeletedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
