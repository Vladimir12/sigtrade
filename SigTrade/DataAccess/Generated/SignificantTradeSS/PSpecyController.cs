using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSS
{
    /// <summary>
    /// Controller class for PSpecies
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class PSpecyController
    {
        // Preload our schema..
        PSpecy thisSchemaLoad = new PSpecy();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public PSpecyCollection FetchAll()
        {
            PSpecyCollection coll = new PSpecyCollection();
            Query qry = new Query(PSpecy.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PSpecyCollection FetchByID(object SpcRecID)
        {
            PSpecyCollection coll = new PSpecyCollection().Where("SpcRecID", SpcRecID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public PSpecyCollection FetchByQuery(Query qry)
        {
            PSpecyCollection coll = new PSpecyCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object SpcRecID)
        {
            return (PSpecy.Delete(SpcRecID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object SpcRecID)
        {
            return (PSpecy.Destroy(SpcRecID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int SpcRecID,int? SpcHbtRecID,int? SpcGenRecID,string SpcAnimalPlant,string SpcName,string SpcAuthor,string SpcInfraRank,string SpcInfraEpithet,string SpcInfraRankAuthor,string SpcStockName,string SpcStatus,string SpcHybrid,string SpcEndemism,string SpcDistribComplete,string SpcPopSize,string SpcPopAccuracy,string SpcAreaOO,string SpcExtentOO,bool SpcOccursPA,bool SpcOccursBotGdn,bool SpcFSC,string SpcNotes,int? SpcBGBaseID,string SpcOldIUCNCat,bool SpcMigratory,bool SpcFreshwater,bool SpcMarine,string SpcRedList1990,string SpcRedList1994,string SpcIdManual,string SpcLastSeen,string SpcCITESAppendix,string SpcCITESNotes,string SpcEUAnnex,DateTime? SpcAdded,DateTime? SpcModified,int? SpcByWho)
	    {
		    PSpecy item = new PSpecy();
		    
            item.SpcRecID = SpcRecID;
            
            item.SpcHbtRecID = SpcHbtRecID;
            
            item.SpcGenRecID = SpcGenRecID;
            
            item.SpcAnimalPlant = SpcAnimalPlant;
            
            item.SpcName = SpcName;
            
            item.SpcAuthor = SpcAuthor;
            
            item.SpcInfraRank = SpcInfraRank;
            
            item.SpcInfraEpithet = SpcInfraEpithet;
            
            item.SpcInfraRankAuthor = SpcInfraRankAuthor;
            
            item.SpcStockName = SpcStockName;
            
            item.SpcStatus = SpcStatus;
            
            item.SpcHybrid = SpcHybrid;
            
            item.SpcEndemism = SpcEndemism;
            
            item.SpcDistribComplete = SpcDistribComplete;
            
            item.SpcPopSize = SpcPopSize;
            
            item.SpcPopAccuracy = SpcPopAccuracy;
            
            item.SpcAreaOO = SpcAreaOO;
            
            item.SpcExtentOO = SpcExtentOO;
            
            item.SpcOccursPA = SpcOccursPA;
            
            item.SpcOccursBotGdn = SpcOccursBotGdn;
            
            item.SpcFSC = SpcFSC;
            
            item.SpcNotes = SpcNotes;
            
            item.SpcBGBaseID = SpcBGBaseID;
            
            item.SpcOldIUCNCat = SpcOldIUCNCat;
            
            item.SpcMigratory = SpcMigratory;
            
            item.SpcFreshwater = SpcFreshwater;
            
            item.SpcMarine = SpcMarine;
            
            item.SpcRedList1990 = SpcRedList1990;
            
            item.SpcRedList1994 = SpcRedList1994;
            
            item.SpcIdManual = SpcIdManual;
            
            item.SpcLastSeen = SpcLastSeen;
            
            item.SpcCITESAppendix = SpcCITESAppendix;
            
            item.SpcCITESNotes = SpcCITESNotes;
            
            item.SpcEUAnnex = SpcEUAnnex;
            
            item.SpcAdded = SpcAdded;
            
            item.SpcModified = SpcModified;
            
            item.SpcByWho = SpcByWho;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int SpcRecID,int? SpcHbtRecID,int? SpcGenRecID,string SpcAnimalPlant,string SpcName,string SpcAuthor,string SpcInfraRank,string SpcInfraEpithet,string SpcInfraRankAuthor,string SpcStockName,string SpcStatus,string SpcHybrid,string SpcEndemism,string SpcDistribComplete,string SpcPopSize,string SpcPopAccuracy,string SpcAreaOO,string SpcExtentOO,bool SpcOccursPA,bool SpcOccursBotGdn,bool SpcFSC,string SpcNotes,int? SpcBGBaseID,string SpcOldIUCNCat,bool SpcMigratory,bool SpcFreshwater,bool SpcMarine,string SpcRedList1990,string SpcRedList1994,string SpcIdManual,string SpcLastSeen,string SpcCITESAppendix,string SpcCITESNotes,string SpcEUAnnex,DateTime? SpcAdded,DateTime? SpcModified,int? SpcByWho)
	    {
		    PSpecy item = new PSpecy();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.SpcRecID = SpcRecID;
				
			item.SpcHbtRecID = SpcHbtRecID;
				
			item.SpcGenRecID = SpcGenRecID;
				
			item.SpcAnimalPlant = SpcAnimalPlant;
				
			item.SpcName = SpcName;
				
			item.SpcAuthor = SpcAuthor;
				
			item.SpcInfraRank = SpcInfraRank;
				
			item.SpcInfraEpithet = SpcInfraEpithet;
				
			item.SpcInfraRankAuthor = SpcInfraRankAuthor;
				
			item.SpcStockName = SpcStockName;
				
			item.SpcStatus = SpcStatus;
				
			item.SpcHybrid = SpcHybrid;
				
			item.SpcEndemism = SpcEndemism;
				
			item.SpcDistribComplete = SpcDistribComplete;
				
			item.SpcPopSize = SpcPopSize;
				
			item.SpcPopAccuracy = SpcPopAccuracy;
				
			item.SpcAreaOO = SpcAreaOO;
				
			item.SpcExtentOO = SpcExtentOO;
				
			item.SpcOccursPA = SpcOccursPA;
				
			item.SpcOccursBotGdn = SpcOccursBotGdn;
				
			item.SpcFSC = SpcFSC;
				
			item.SpcNotes = SpcNotes;
				
			item.SpcBGBaseID = SpcBGBaseID;
				
			item.SpcOldIUCNCat = SpcOldIUCNCat;
				
			item.SpcMigratory = SpcMigratory;
				
			item.SpcFreshwater = SpcFreshwater;
				
			item.SpcMarine = SpcMarine;
				
			item.SpcRedList1990 = SpcRedList1990;
				
			item.SpcRedList1994 = SpcRedList1994;
				
			item.SpcIdManual = SpcIdManual;
				
			item.SpcLastSeen = SpcLastSeen;
				
			item.SpcCITESAppendix = SpcCITESAppendix;
				
			item.SpcCITESNotes = SpcCITESNotes;
				
			item.SpcEUAnnex = SpcEUAnnex;
				
			item.SpcAdded = SpcAdded;
				
			item.SpcModified = SpcModified;
				
			item.SpcByWho = SpcByWho;
				
	        item.Save(UserName);
	    }
    }
}
