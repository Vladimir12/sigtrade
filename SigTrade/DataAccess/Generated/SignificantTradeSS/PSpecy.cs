using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSS
{
	/// <summary>
	/// Strongly-typed collection for the PSpecy class.
	/// </summary>
    [Serializable]
	public partial class PSpecyCollection : ActiveList<PSpecy, PSpecyCollection>
	{	   
		public PSpecyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PSpecyCollection</returns>
		public PSpecyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                PSpecy o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PSpecies table.
	/// </summary>
	[Serializable]
	public partial class PSpecy : ActiveRecord<PSpecy>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public PSpecy()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public PSpecy(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public PSpecy(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public PSpecy(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PSpecies", TableType.Table, DataService.GetInstance("SignificantTradeSS"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSpcRecID = new TableSchema.TableColumn(schema);
				colvarSpcRecID.ColumnName = "SpcRecID";
				colvarSpcRecID.DataType = DbType.Int32;
				colvarSpcRecID.MaxLength = 0;
				colvarSpcRecID.AutoIncrement = false;
				colvarSpcRecID.IsNullable = false;
				colvarSpcRecID.IsPrimaryKey = true;
				colvarSpcRecID.IsForeignKey = false;
				colvarSpcRecID.IsReadOnly = false;
				colvarSpcRecID.DefaultSetting = @"";
				colvarSpcRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcRecID);
				
				TableSchema.TableColumn colvarSpcHbtRecID = new TableSchema.TableColumn(schema);
				colvarSpcHbtRecID.ColumnName = "SpcHbtRecID";
				colvarSpcHbtRecID.DataType = DbType.Int32;
				colvarSpcHbtRecID.MaxLength = 0;
				colvarSpcHbtRecID.AutoIncrement = false;
				colvarSpcHbtRecID.IsNullable = true;
				colvarSpcHbtRecID.IsPrimaryKey = false;
				colvarSpcHbtRecID.IsForeignKey = false;
				colvarSpcHbtRecID.IsReadOnly = false;
				colvarSpcHbtRecID.DefaultSetting = @"";
				colvarSpcHbtRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcHbtRecID);
				
				TableSchema.TableColumn colvarSpcGenRecID = new TableSchema.TableColumn(schema);
				colvarSpcGenRecID.ColumnName = "SpcGenRecID";
				colvarSpcGenRecID.DataType = DbType.Int32;
				colvarSpcGenRecID.MaxLength = 0;
				colvarSpcGenRecID.AutoIncrement = false;
				colvarSpcGenRecID.IsNullable = true;
				colvarSpcGenRecID.IsPrimaryKey = false;
				colvarSpcGenRecID.IsForeignKey = false;
				colvarSpcGenRecID.IsReadOnly = false;
				colvarSpcGenRecID.DefaultSetting = @"";
				colvarSpcGenRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcGenRecID);
				
				TableSchema.TableColumn colvarSpcAnimalPlant = new TableSchema.TableColumn(schema);
				colvarSpcAnimalPlant.ColumnName = "SpcAnimalPlant";
				colvarSpcAnimalPlant.DataType = DbType.String;
				colvarSpcAnimalPlant.MaxLength = 1;
				colvarSpcAnimalPlant.AutoIncrement = false;
				colvarSpcAnimalPlant.IsNullable = true;
				colvarSpcAnimalPlant.IsPrimaryKey = false;
				colvarSpcAnimalPlant.IsForeignKey = false;
				colvarSpcAnimalPlant.IsReadOnly = false;
				colvarSpcAnimalPlant.DefaultSetting = @"";
				colvarSpcAnimalPlant.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcAnimalPlant);
				
				TableSchema.TableColumn colvarSpcName = new TableSchema.TableColumn(schema);
				colvarSpcName.ColumnName = "SpcName";
				colvarSpcName.DataType = DbType.String;
				colvarSpcName.MaxLength = 30;
				colvarSpcName.AutoIncrement = false;
				colvarSpcName.IsNullable = true;
				colvarSpcName.IsPrimaryKey = false;
				colvarSpcName.IsForeignKey = false;
				colvarSpcName.IsReadOnly = false;
				colvarSpcName.DefaultSetting = @"";
				colvarSpcName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcName);
				
				TableSchema.TableColumn colvarSpcAuthor = new TableSchema.TableColumn(schema);
				colvarSpcAuthor.ColumnName = "SpcAuthor";
				colvarSpcAuthor.DataType = DbType.String;
				colvarSpcAuthor.MaxLength = 70;
				colvarSpcAuthor.AutoIncrement = false;
				colvarSpcAuthor.IsNullable = true;
				colvarSpcAuthor.IsPrimaryKey = false;
				colvarSpcAuthor.IsForeignKey = false;
				colvarSpcAuthor.IsReadOnly = false;
				colvarSpcAuthor.DefaultSetting = @"";
				colvarSpcAuthor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcAuthor);
				
				TableSchema.TableColumn colvarSpcInfraRank = new TableSchema.TableColumn(schema);
				colvarSpcInfraRank.ColumnName = "SpcInfraRank";
				colvarSpcInfraRank.DataType = DbType.String;
				colvarSpcInfraRank.MaxLength = 4;
				colvarSpcInfraRank.AutoIncrement = false;
				colvarSpcInfraRank.IsNullable = true;
				colvarSpcInfraRank.IsPrimaryKey = false;
				colvarSpcInfraRank.IsForeignKey = false;
				colvarSpcInfraRank.IsReadOnly = false;
				colvarSpcInfraRank.DefaultSetting = @"";
				colvarSpcInfraRank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcInfraRank);
				
				TableSchema.TableColumn colvarSpcInfraEpithet = new TableSchema.TableColumn(schema);
				colvarSpcInfraEpithet.ColumnName = "SpcInfraEpithet";
				colvarSpcInfraEpithet.DataType = DbType.String;
				colvarSpcInfraEpithet.MaxLength = 30;
				colvarSpcInfraEpithet.AutoIncrement = false;
				colvarSpcInfraEpithet.IsNullable = true;
				colvarSpcInfraEpithet.IsPrimaryKey = false;
				colvarSpcInfraEpithet.IsForeignKey = false;
				colvarSpcInfraEpithet.IsReadOnly = false;
				colvarSpcInfraEpithet.DefaultSetting = @"";
				colvarSpcInfraEpithet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcInfraEpithet);
				
				TableSchema.TableColumn colvarSpcInfraRankAuthor = new TableSchema.TableColumn(schema);
				colvarSpcInfraRankAuthor.ColumnName = "SpcInfraRankAuthor";
				colvarSpcInfraRankAuthor.DataType = DbType.String;
				colvarSpcInfraRankAuthor.MaxLength = 70;
				colvarSpcInfraRankAuthor.AutoIncrement = false;
				colvarSpcInfraRankAuthor.IsNullable = true;
				colvarSpcInfraRankAuthor.IsPrimaryKey = false;
				colvarSpcInfraRankAuthor.IsForeignKey = false;
				colvarSpcInfraRankAuthor.IsReadOnly = false;
				colvarSpcInfraRankAuthor.DefaultSetting = @"";
				colvarSpcInfraRankAuthor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcInfraRankAuthor);
				
				TableSchema.TableColumn colvarSpcStockName = new TableSchema.TableColumn(schema);
				colvarSpcStockName.ColumnName = "SpcStockName";
				colvarSpcStockName.DataType = DbType.String;
				colvarSpcStockName.MaxLength = 150;
				colvarSpcStockName.AutoIncrement = false;
				colvarSpcStockName.IsNullable = true;
				colvarSpcStockName.IsPrimaryKey = false;
				colvarSpcStockName.IsForeignKey = false;
				colvarSpcStockName.IsReadOnly = false;
				colvarSpcStockName.DefaultSetting = @"";
				colvarSpcStockName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcStockName);
				
				TableSchema.TableColumn colvarSpcStatus = new TableSchema.TableColumn(schema);
				colvarSpcStatus.ColumnName = "SpcStatus";
				colvarSpcStatus.DataType = DbType.String;
				colvarSpcStatus.MaxLength = 1;
				colvarSpcStatus.AutoIncrement = false;
				colvarSpcStatus.IsNullable = true;
				colvarSpcStatus.IsPrimaryKey = false;
				colvarSpcStatus.IsForeignKey = false;
				colvarSpcStatus.IsReadOnly = false;
				colvarSpcStatus.DefaultSetting = @"";
				colvarSpcStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcStatus);
				
				TableSchema.TableColumn colvarSpcHybrid = new TableSchema.TableColumn(schema);
				colvarSpcHybrid.ColumnName = "SpcHybrid";
				colvarSpcHybrid.DataType = DbType.String;
				colvarSpcHybrid.MaxLength = 1;
				colvarSpcHybrid.AutoIncrement = false;
				colvarSpcHybrid.IsNullable = true;
				colvarSpcHybrid.IsPrimaryKey = false;
				colvarSpcHybrid.IsForeignKey = false;
				colvarSpcHybrid.IsReadOnly = false;
				colvarSpcHybrid.DefaultSetting = @"";
				colvarSpcHybrid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcHybrid);
				
				TableSchema.TableColumn colvarSpcEndemism = new TableSchema.TableColumn(schema);
				colvarSpcEndemism.ColumnName = "SpcEndemism";
				colvarSpcEndemism.DataType = DbType.String;
				colvarSpcEndemism.MaxLength = 15;
				colvarSpcEndemism.AutoIncrement = false;
				colvarSpcEndemism.IsNullable = true;
				colvarSpcEndemism.IsPrimaryKey = false;
				colvarSpcEndemism.IsForeignKey = false;
				colvarSpcEndemism.IsReadOnly = false;
				colvarSpcEndemism.DefaultSetting = @"";
				colvarSpcEndemism.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcEndemism);
				
				TableSchema.TableColumn colvarSpcDistribComplete = new TableSchema.TableColumn(schema);
				colvarSpcDistribComplete.ColumnName = "SpcDistribComplete";
				colvarSpcDistribComplete.DataType = DbType.String;
				colvarSpcDistribComplete.MaxLength = 1;
				colvarSpcDistribComplete.AutoIncrement = false;
				colvarSpcDistribComplete.IsNullable = true;
				colvarSpcDistribComplete.IsPrimaryKey = false;
				colvarSpcDistribComplete.IsForeignKey = false;
				colvarSpcDistribComplete.IsReadOnly = false;
				colvarSpcDistribComplete.DefaultSetting = @"";
				colvarSpcDistribComplete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcDistribComplete);
				
				TableSchema.TableColumn colvarSpcPopSize = new TableSchema.TableColumn(schema);
				colvarSpcPopSize.ColumnName = "SpcPopSize";
				colvarSpcPopSize.DataType = DbType.String;
				colvarSpcPopSize.MaxLength = 20;
				colvarSpcPopSize.AutoIncrement = false;
				colvarSpcPopSize.IsNullable = true;
				colvarSpcPopSize.IsPrimaryKey = false;
				colvarSpcPopSize.IsForeignKey = false;
				colvarSpcPopSize.IsReadOnly = false;
				colvarSpcPopSize.DefaultSetting = @"";
				colvarSpcPopSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcPopSize);
				
				TableSchema.TableColumn colvarSpcPopAccuracy = new TableSchema.TableColumn(schema);
				colvarSpcPopAccuracy.ColumnName = "SpcPopAccuracy";
				colvarSpcPopAccuracy.DataType = DbType.String;
				colvarSpcPopAccuracy.MaxLength = 10;
				colvarSpcPopAccuracy.AutoIncrement = false;
				colvarSpcPopAccuracy.IsNullable = true;
				colvarSpcPopAccuracy.IsPrimaryKey = false;
				colvarSpcPopAccuracy.IsForeignKey = false;
				colvarSpcPopAccuracy.IsReadOnly = false;
				colvarSpcPopAccuracy.DefaultSetting = @"";
				colvarSpcPopAccuracy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcPopAccuracy);
				
				TableSchema.TableColumn colvarSpcAreaOO = new TableSchema.TableColumn(schema);
				colvarSpcAreaOO.ColumnName = "SpcAreaOO";
				colvarSpcAreaOO.DataType = DbType.String;
				colvarSpcAreaOO.MaxLength = 15;
				colvarSpcAreaOO.AutoIncrement = false;
				colvarSpcAreaOO.IsNullable = true;
				colvarSpcAreaOO.IsPrimaryKey = false;
				colvarSpcAreaOO.IsForeignKey = false;
				colvarSpcAreaOO.IsReadOnly = false;
				colvarSpcAreaOO.DefaultSetting = @"";
				colvarSpcAreaOO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcAreaOO);
				
				TableSchema.TableColumn colvarSpcExtentOO = new TableSchema.TableColumn(schema);
				colvarSpcExtentOO.ColumnName = "SpcExtentOO";
				colvarSpcExtentOO.DataType = DbType.String;
				colvarSpcExtentOO.MaxLength = 15;
				colvarSpcExtentOO.AutoIncrement = false;
				colvarSpcExtentOO.IsNullable = true;
				colvarSpcExtentOO.IsPrimaryKey = false;
				colvarSpcExtentOO.IsForeignKey = false;
				colvarSpcExtentOO.IsReadOnly = false;
				colvarSpcExtentOO.DefaultSetting = @"";
				colvarSpcExtentOO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcExtentOO);
				
				TableSchema.TableColumn colvarSpcOccursPA = new TableSchema.TableColumn(schema);
				colvarSpcOccursPA.ColumnName = "SpcOccursPA";
				colvarSpcOccursPA.DataType = DbType.Boolean;
				colvarSpcOccursPA.MaxLength = 0;
				colvarSpcOccursPA.AutoIncrement = false;
				colvarSpcOccursPA.IsNullable = false;
				colvarSpcOccursPA.IsPrimaryKey = false;
				colvarSpcOccursPA.IsForeignKey = false;
				colvarSpcOccursPA.IsReadOnly = false;
				colvarSpcOccursPA.DefaultSetting = @"";
				colvarSpcOccursPA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcOccursPA);
				
				TableSchema.TableColumn colvarSpcOccursBotGdn = new TableSchema.TableColumn(schema);
				colvarSpcOccursBotGdn.ColumnName = "SpcOccursBotGdn";
				colvarSpcOccursBotGdn.DataType = DbType.Boolean;
				colvarSpcOccursBotGdn.MaxLength = 0;
				colvarSpcOccursBotGdn.AutoIncrement = false;
				colvarSpcOccursBotGdn.IsNullable = false;
				colvarSpcOccursBotGdn.IsPrimaryKey = false;
				colvarSpcOccursBotGdn.IsForeignKey = false;
				colvarSpcOccursBotGdn.IsReadOnly = false;
				colvarSpcOccursBotGdn.DefaultSetting = @"";
				colvarSpcOccursBotGdn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcOccursBotGdn);
				
				TableSchema.TableColumn colvarSpcFSC = new TableSchema.TableColumn(schema);
				colvarSpcFSC.ColumnName = "SpcFSC";
				colvarSpcFSC.DataType = DbType.Boolean;
				colvarSpcFSC.MaxLength = 0;
				colvarSpcFSC.AutoIncrement = false;
				colvarSpcFSC.IsNullable = false;
				colvarSpcFSC.IsPrimaryKey = false;
				colvarSpcFSC.IsForeignKey = false;
				colvarSpcFSC.IsReadOnly = false;
				colvarSpcFSC.DefaultSetting = @"";
				colvarSpcFSC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcFSC);
				
				TableSchema.TableColumn colvarSpcNotes = new TableSchema.TableColumn(schema);
				colvarSpcNotes.ColumnName = "SpcNotes";
				colvarSpcNotes.DataType = DbType.String;
				colvarSpcNotes.MaxLength = 1073741823;
				colvarSpcNotes.AutoIncrement = false;
				colvarSpcNotes.IsNullable = true;
				colvarSpcNotes.IsPrimaryKey = false;
				colvarSpcNotes.IsForeignKey = false;
				colvarSpcNotes.IsReadOnly = false;
				colvarSpcNotes.DefaultSetting = @"";
				colvarSpcNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcNotes);
				
				TableSchema.TableColumn colvarSpcBGBaseID = new TableSchema.TableColumn(schema);
				colvarSpcBGBaseID.ColumnName = "SpcBGBaseID";
				colvarSpcBGBaseID.DataType = DbType.Int32;
				colvarSpcBGBaseID.MaxLength = 0;
				colvarSpcBGBaseID.AutoIncrement = false;
				colvarSpcBGBaseID.IsNullable = true;
				colvarSpcBGBaseID.IsPrimaryKey = false;
				colvarSpcBGBaseID.IsForeignKey = false;
				colvarSpcBGBaseID.IsReadOnly = false;
				colvarSpcBGBaseID.DefaultSetting = @"";
				colvarSpcBGBaseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcBGBaseID);
				
				TableSchema.TableColumn colvarSpcOldIUCNCat = new TableSchema.TableColumn(schema);
				colvarSpcOldIUCNCat.ColumnName = "SpcOldIUCNCat";
				colvarSpcOldIUCNCat.DataType = DbType.String;
				colvarSpcOldIUCNCat.MaxLength = 2;
				colvarSpcOldIUCNCat.AutoIncrement = false;
				colvarSpcOldIUCNCat.IsNullable = true;
				colvarSpcOldIUCNCat.IsPrimaryKey = false;
				colvarSpcOldIUCNCat.IsForeignKey = false;
				colvarSpcOldIUCNCat.IsReadOnly = false;
				colvarSpcOldIUCNCat.DefaultSetting = @"";
				colvarSpcOldIUCNCat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcOldIUCNCat);
				
				TableSchema.TableColumn colvarSpcMigratory = new TableSchema.TableColumn(schema);
				colvarSpcMigratory.ColumnName = "SpcMigratory";
				colvarSpcMigratory.DataType = DbType.Boolean;
				colvarSpcMigratory.MaxLength = 0;
				colvarSpcMigratory.AutoIncrement = false;
				colvarSpcMigratory.IsNullable = false;
				colvarSpcMigratory.IsPrimaryKey = false;
				colvarSpcMigratory.IsForeignKey = false;
				colvarSpcMigratory.IsReadOnly = false;
				colvarSpcMigratory.DefaultSetting = @"";
				colvarSpcMigratory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcMigratory);
				
				TableSchema.TableColumn colvarSpcFreshwater = new TableSchema.TableColumn(schema);
				colvarSpcFreshwater.ColumnName = "SpcFreshwater";
				colvarSpcFreshwater.DataType = DbType.Boolean;
				colvarSpcFreshwater.MaxLength = 0;
				colvarSpcFreshwater.AutoIncrement = false;
				colvarSpcFreshwater.IsNullable = false;
				colvarSpcFreshwater.IsPrimaryKey = false;
				colvarSpcFreshwater.IsForeignKey = false;
				colvarSpcFreshwater.IsReadOnly = false;
				colvarSpcFreshwater.DefaultSetting = @"";
				colvarSpcFreshwater.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcFreshwater);
				
				TableSchema.TableColumn colvarSpcMarine = new TableSchema.TableColumn(schema);
				colvarSpcMarine.ColumnName = "SpcMarine";
				colvarSpcMarine.DataType = DbType.Boolean;
				colvarSpcMarine.MaxLength = 0;
				colvarSpcMarine.AutoIncrement = false;
				colvarSpcMarine.IsNullable = false;
				colvarSpcMarine.IsPrimaryKey = false;
				colvarSpcMarine.IsForeignKey = false;
				colvarSpcMarine.IsReadOnly = false;
				colvarSpcMarine.DefaultSetting = @"";
				colvarSpcMarine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcMarine);
				
				TableSchema.TableColumn colvarSpcRedList1990 = new TableSchema.TableColumn(schema);
				colvarSpcRedList1990.ColumnName = "SpcRedList1990";
				colvarSpcRedList1990.DataType = DbType.String;
				colvarSpcRedList1990.MaxLength = 10;
				colvarSpcRedList1990.AutoIncrement = false;
				colvarSpcRedList1990.IsNullable = true;
				colvarSpcRedList1990.IsPrimaryKey = false;
				colvarSpcRedList1990.IsForeignKey = false;
				colvarSpcRedList1990.IsReadOnly = false;
				colvarSpcRedList1990.DefaultSetting = @"";
				colvarSpcRedList1990.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcRedList1990);
				
				TableSchema.TableColumn colvarSpcRedList1994 = new TableSchema.TableColumn(schema);
				colvarSpcRedList1994.ColumnName = "SpcRedList1994";
				colvarSpcRedList1994.DataType = DbType.String;
				colvarSpcRedList1994.MaxLength = 10;
				colvarSpcRedList1994.AutoIncrement = false;
				colvarSpcRedList1994.IsNullable = true;
				colvarSpcRedList1994.IsPrimaryKey = false;
				colvarSpcRedList1994.IsForeignKey = false;
				colvarSpcRedList1994.IsReadOnly = false;
				colvarSpcRedList1994.DefaultSetting = @"";
				colvarSpcRedList1994.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcRedList1994);
				
				TableSchema.TableColumn colvarSpcIdManual = new TableSchema.TableColumn(schema);
				colvarSpcIdManual.ColumnName = "SpcIdManual";
				colvarSpcIdManual.DataType = DbType.String;
				colvarSpcIdManual.MaxLength = 30;
				colvarSpcIdManual.AutoIncrement = false;
				colvarSpcIdManual.IsNullable = true;
				colvarSpcIdManual.IsPrimaryKey = false;
				colvarSpcIdManual.IsForeignKey = false;
				colvarSpcIdManual.IsReadOnly = false;
				colvarSpcIdManual.DefaultSetting = @"";
				colvarSpcIdManual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcIdManual);
				
				TableSchema.TableColumn colvarSpcLastSeen = new TableSchema.TableColumn(schema);
				colvarSpcLastSeen.ColumnName = "SpcLastSeen";
				colvarSpcLastSeen.DataType = DbType.String;
				colvarSpcLastSeen.MaxLength = 15;
				colvarSpcLastSeen.AutoIncrement = false;
				colvarSpcLastSeen.IsNullable = true;
				colvarSpcLastSeen.IsPrimaryKey = false;
				colvarSpcLastSeen.IsForeignKey = false;
				colvarSpcLastSeen.IsReadOnly = false;
				colvarSpcLastSeen.DefaultSetting = @"";
				colvarSpcLastSeen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcLastSeen);
				
				TableSchema.TableColumn colvarSpcCITESAppendix = new TableSchema.TableColumn(schema);
				colvarSpcCITESAppendix.ColumnName = "SpcCITESAppendix";
				colvarSpcCITESAppendix.DataType = DbType.String;
				colvarSpcCITESAppendix.MaxLength = 50;
				colvarSpcCITESAppendix.AutoIncrement = false;
				colvarSpcCITESAppendix.IsNullable = true;
				colvarSpcCITESAppendix.IsPrimaryKey = false;
				colvarSpcCITESAppendix.IsForeignKey = false;
				colvarSpcCITESAppendix.IsReadOnly = false;
				colvarSpcCITESAppendix.DefaultSetting = @"";
				colvarSpcCITESAppendix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcCITESAppendix);
				
				TableSchema.TableColumn colvarSpcCITESNotes = new TableSchema.TableColumn(schema);
				colvarSpcCITESNotes.ColumnName = "SpcCITESNotes";
				colvarSpcCITESNotes.DataType = DbType.String;
				colvarSpcCITESNotes.MaxLength = 1073741823;
				colvarSpcCITESNotes.AutoIncrement = false;
				colvarSpcCITESNotes.IsNullable = true;
				colvarSpcCITESNotes.IsPrimaryKey = false;
				colvarSpcCITESNotes.IsForeignKey = false;
				colvarSpcCITESNotes.IsReadOnly = false;
				colvarSpcCITESNotes.DefaultSetting = @"";
				colvarSpcCITESNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcCITESNotes);
				
				TableSchema.TableColumn colvarSpcEUAnnex = new TableSchema.TableColumn(schema);
				colvarSpcEUAnnex.ColumnName = "SpcEUAnnex";
				colvarSpcEUAnnex.DataType = DbType.String;
				colvarSpcEUAnnex.MaxLength = 50;
				colvarSpcEUAnnex.AutoIncrement = false;
				colvarSpcEUAnnex.IsNullable = true;
				colvarSpcEUAnnex.IsPrimaryKey = false;
				colvarSpcEUAnnex.IsForeignKey = false;
				colvarSpcEUAnnex.IsReadOnly = false;
				colvarSpcEUAnnex.DefaultSetting = @"";
				colvarSpcEUAnnex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcEUAnnex);
				
				TableSchema.TableColumn colvarSpcAdded = new TableSchema.TableColumn(schema);
				colvarSpcAdded.ColumnName = "SpcAdded";
				colvarSpcAdded.DataType = DbType.DateTime;
				colvarSpcAdded.MaxLength = 0;
				colvarSpcAdded.AutoIncrement = false;
				colvarSpcAdded.IsNullable = true;
				colvarSpcAdded.IsPrimaryKey = false;
				colvarSpcAdded.IsForeignKey = false;
				colvarSpcAdded.IsReadOnly = false;
				colvarSpcAdded.DefaultSetting = @"";
				colvarSpcAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcAdded);
				
				TableSchema.TableColumn colvarSpcModified = new TableSchema.TableColumn(schema);
				colvarSpcModified.ColumnName = "SpcModified";
				colvarSpcModified.DataType = DbType.DateTime;
				colvarSpcModified.MaxLength = 0;
				colvarSpcModified.AutoIncrement = false;
				colvarSpcModified.IsNullable = true;
				colvarSpcModified.IsPrimaryKey = false;
				colvarSpcModified.IsForeignKey = false;
				colvarSpcModified.IsReadOnly = false;
				colvarSpcModified.DefaultSetting = @"";
				colvarSpcModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcModified);
				
				TableSchema.TableColumn colvarSpcByWho = new TableSchema.TableColumn(schema);
				colvarSpcByWho.ColumnName = "SpcByWho";
				colvarSpcByWho.DataType = DbType.Int32;
				colvarSpcByWho.MaxLength = 0;
				colvarSpcByWho.AutoIncrement = false;
				colvarSpcByWho.IsNullable = true;
				colvarSpcByWho.IsPrimaryKey = false;
				colvarSpcByWho.IsForeignKey = false;
				colvarSpcByWho.IsReadOnly = false;
				colvarSpcByWho.DefaultSetting = @"";
				colvarSpcByWho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcByWho);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SignificantTradeSS"].AddSchema("PSpecies",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SpcRecID")]
		[Bindable(true)]
		public int SpcRecID 
		{
			get { return GetColumnValue<int>(Columns.SpcRecID); }
			set { SetColumnValue(Columns.SpcRecID, value); }
		}
		  
		[XmlAttribute("SpcHbtRecID")]
		[Bindable(true)]
		public int? SpcHbtRecID 
		{
			get { return GetColumnValue<int?>(Columns.SpcHbtRecID); }
			set { SetColumnValue(Columns.SpcHbtRecID, value); }
		}
		  
		[XmlAttribute("SpcGenRecID")]
		[Bindable(true)]
		public int? SpcGenRecID 
		{
			get { return GetColumnValue<int?>(Columns.SpcGenRecID); }
			set { SetColumnValue(Columns.SpcGenRecID, value); }
		}
		  
		[XmlAttribute("SpcAnimalPlant")]
		[Bindable(true)]
		public string SpcAnimalPlant 
		{
			get { return GetColumnValue<string>(Columns.SpcAnimalPlant); }
			set { SetColumnValue(Columns.SpcAnimalPlant, value); }
		}
		  
		[XmlAttribute("SpcName")]
		[Bindable(true)]
		public string SpcName 
		{
			get { return GetColumnValue<string>(Columns.SpcName); }
			set { SetColumnValue(Columns.SpcName, value); }
		}
		  
		[XmlAttribute("SpcAuthor")]
		[Bindable(true)]
		public string SpcAuthor 
		{
			get { return GetColumnValue<string>(Columns.SpcAuthor); }
			set { SetColumnValue(Columns.SpcAuthor, value); }
		}
		  
		[XmlAttribute("SpcInfraRank")]
		[Bindable(true)]
		public string SpcInfraRank 
		{
			get { return GetColumnValue<string>(Columns.SpcInfraRank); }
			set { SetColumnValue(Columns.SpcInfraRank, value); }
		}
		  
		[XmlAttribute("SpcInfraEpithet")]
		[Bindable(true)]
		public string SpcInfraEpithet 
		{
			get { return GetColumnValue<string>(Columns.SpcInfraEpithet); }
			set { SetColumnValue(Columns.SpcInfraEpithet, value); }
		}
		  
		[XmlAttribute("SpcInfraRankAuthor")]
		[Bindable(true)]
		public string SpcInfraRankAuthor 
		{
			get { return GetColumnValue<string>(Columns.SpcInfraRankAuthor); }
			set { SetColumnValue(Columns.SpcInfraRankAuthor, value); }
		}
		  
		[XmlAttribute("SpcStockName")]
		[Bindable(true)]
		public string SpcStockName 
		{
			get { return GetColumnValue<string>(Columns.SpcStockName); }
			set { SetColumnValue(Columns.SpcStockName, value); }
		}
		  
		[XmlAttribute("SpcStatus")]
		[Bindable(true)]
		public string SpcStatus 
		{
			get { return GetColumnValue<string>(Columns.SpcStatus); }
			set { SetColumnValue(Columns.SpcStatus, value); }
		}
		  
		[XmlAttribute("SpcHybrid")]
		[Bindable(true)]
		public string SpcHybrid 
		{
			get { return GetColumnValue<string>(Columns.SpcHybrid); }
			set { SetColumnValue(Columns.SpcHybrid, value); }
		}
		  
		[XmlAttribute("SpcEndemism")]
		[Bindable(true)]
		public string SpcEndemism 
		{
			get { return GetColumnValue<string>(Columns.SpcEndemism); }
			set { SetColumnValue(Columns.SpcEndemism, value); }
		}
		  
		[XmlAttribute("SpcDistribComplete")]
		[Bindable(true)]
		public string SpcDistribComplete 
		{
			get { return GetColumnValue<string>(Columns.SpcDistribComplete); }
			set { SetColumnValue(Columns.SpcDistribComplete, value); }
		}
		  
		[XmlAttribute("SpcPopSize")]
		[Bindable(true)]
		public string SpcPopSize 
		{
			get { return GetColumnValue<string>(Columns.SpcPopSize); }
			set { SetColumnValue(Columns.SpcPopSize, value); }
		}
		  
		[XmlAttribute("SpcPopAccuracy")]
		[Bindable(true)]
		public string SpcPopAccuracy 
		{
			get { return GetColumnValue<string>(Columns.SpcPopAccuracy); }
			set { SetColumnValue(Columns.SpcPopAccuracy, value); }
		}
		  
		[XmlAttribute("SpcAreaOO")]
		[Bindable(true)]
		public string SpcAreaOO 
		{
			get { return GetColumnValue<string>(Columns.SpcAreaOO); }
			set { SetColumnValue(Columns.SpcAreaOO, value); }
		}
		  
		[XmlAttribute("SpcExtentOO")]
		[Bindable(true)]
		public string SpcExtentOO 
		{
			get { return GetColumnValue<string>(Columns.SpcExtentOO); }
			set { SetColumnValue(Columns.SpcExtentOO, value); }
		}
		  
		[XmlAttribute("SpcOccursPA")]
		[Bindable(true)]
		public bool SpcOccursPA 
		{
			get { return GetColumnValue<bool>(Columns.SpcOccursPA); }
			set { SetColumnValue(Columns.SpcOccursPA, value); }
		}
		  
		[XmlAttribute("SpcOccursBotGdn")]
		[Bindable(true)]
		public bool SpcOccursBotGdn 
		{
			get { return GetColumnValue<bool>(Columns.SpcOccursBotGdn); }
			set { SetColumnValue(Columns.SpcOccursBotGdn, value); }
		}
		  
		[XmlAttribute("SpcFSC")]
		[Bindable(true)]
		public bool SpcFSC 
		{
			get { return GetColumnValue<bool>(Columns.SpcFSC); }
			set { SetColumnValue(Columns.SpcFSC, value); }
		}
		  
		[XmlAttribute("SpcNotes")]
		[Bindable(true)]
		public string SpcNotes 
		{
			get { return GetColumnValue<string>(Columns.SpcNotes); }
			set { SetColumnValue(Columns.SpcNotes, value); }
		}
		  
		[XmlAttribute("SpcBGBaseID")]
		[Bindable(true)]
		public int? SpcBGBaseID 
		{
			get { return GetColumnValue<int?>(Columns.SpcBGBaseID); }
			set { SetColumnValue(Columns.SpcBGBaseID, value); }
		}
		  
		[XmlAttribute("SpcOldIUCNCat")]
		[Bindable(true)]
		public string SpcOldIUCNCat 
		{
			get { return GetColumnValue<string>(Columns.SpcOldIUCNCat); }
			set { SetColumnValue(Columns.SpcOldIUCNCat, value); }
		}
		  
		[XmlAttribute("SpcMigratory")]
		[Bindable(true)]
		public bool SpcMigratory 
		{
			get { return GetColumnValue<bool>(Columns.SpcMigratory); }
			set { SetColumnValue(Columns.SpcMigratory, value); }
		}
		  
		[XmlAttribute("SpcFreshwater")]
		[Bindable(true)]
		public bool SpcFreshwater 
		{
			get { return GetColumnValue<bool>(Columns.SpcFreshwater); }
			set { SetColumnValue(Columns.SpcFreshwater, value); }
		}
		  
		[XmlAttribute("SpcMarine")]
		[Bindable(true)]
		public bool SpcMarine 
		{
			get { return GetColumnValue<bool>(Columns.SpcMarine); }
			set { SetColumnValue(Columns.SpcMarine, value); }
		}
		  
		[XmlAttribute("SpcRedList1990")]
		[Bindable(true)]
		public string SpcRedList1990 
		{
			get { return GetColumnValue<string>(Columns.SpcRedList1990); }
			set { SetColumnValue(Columns.SpcRedList1990, value); }
		}
		  
		[XmlAttribute("SpcRedList1994")]
		[Bindable(true)]
		public string SpcRedList1994 
		{
			get { return GetColumnValue<string>(Columns.SpcRedList1994); }
			set { SetColumnValue(Columns.SpcRedList1994, value); }
		}
		  
		[XmlAttribute("SpcIdManual")]
		[Bindable(true)]
		public string SpcIdManual 
		{
			get { return GetColumnValue<string>(Columns.SpcIdManual); }
			set { SetColumnValue(Columns.SpcIdManual, value); }
		}
		  
		[XmlAttribute("SpcLastSeen")]
		[Bindable(true)]
		public string SpcLastSeen 
		{
			get { return GetColumnValue<string>(Columns.SpcLastSeen); }
			set { SetColumnValue(Columns.SpcLastSeen, value); }
		}
		  
		[XmlAttribute("SpcCITESAppendix")]
		[Bindable(true)]
		public string SpcCITESAppendix 
		{
			get { return GetColumnValue<string>(Columns.SpcCITESAppendix); }
			set { SetColumnValue(Columns.SpcCITESAppendix, value); }
		}
		  
		[XmlAttribute("SpcCITESNotes")]
		[Bindable(true)]
		public string SpcCITESNotes 
		{
			get { return GetColumnValue<string>(Columns.SpcCITESNotes); }
			set { SetColumnValue(Columns.SpcCITESNotes, value); }
		}
		  
		[XmlAttribute("SpcEUAnnex")]
		[Bindable(true)]
		public string SpcEUAnnex 
		{
			get { return GetColumnValue<string>(Columns.SpcEUAnnex); }
			set { SetColumnValue(Columns.SpcEUAnnex, value); }
		}
		  
		[XmlAttribute("SpcAdded")]
		[Bindable(true)]
		public DateTime? SpcAdded 
		{
			get { return GetColumnValue<DateTime?>(Columns.SpcAdded); }
			set { SetColumnValue(Columns.SpcAdded, value); }
		}
		  
		[XmlAttribute("SpcModified")]
		[Bindable(true)]
		public DateTime? SpcModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.SpcModified); }
			set { SetColumnValue(Columns.SpcModified, value); }
		}
		  
		[XmlAttribute("SpcByWho")]
		[Bindable(true)]
		public int? SpcByWho 
		{
			get { return GetColumnValue<int?>(Columns.SpcByWho); }
			set { SetColumnValue(Columns.SpcByWho, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varSpcRecID,int? varSpcHbtRecID,int? varSpcGenRecID,string varSpcAnimalPlant,string varSpcName,string varSpcAuthor,string varSpcInfraRank,string varSpcInfraEpithet,string varSpcInfraRankAuthor,string varSpcStockName,string varSpcStatus,string varSpcHybrid,string varSpcEndemism,string varSpcDistribComplete,string varSpcPopSize,string varSpcPopAccuracy,string varSpcAreaOO,string varSpcExtentOO,bool varSpcOccursPA,bool varSpcOccursBotGdn,bool varSpcFSC,string varSpcNotes,int? varSpcBGBaseID,string varSpcOldIUCNCat,bool varSpcMigratory,bool varSpcFreshwater,bool varSpcMarine,string varSpcRedList1990,string varSpcRedList1994,string varSpcIdManual,string varSpcLastSeen,string varSpcCITESAppendix,string varSpcCITESNotes,string varSpcEUAnnex,DateTime? varSpcAdded,DateTime? varSpcModified,int? varSpcByWho)
		{
			PSpecy item = new PSpecy();
			
			item.SpcRecID = varSpcRecID;
			
			item.SpcHbtRecID = varSpcHbtRecID;
			
			item.SpcGenRecID = varSpcGenRecID;
			
			item.SpcAnimalPlant = varSpcAnimalPlant;
			
			item.SpcName = varSpcName;
			
			item.SpcAuthor = varSpcAuthor;
			
			item.SpcInfraRank = varSpcInfraRank;
			
			item.SpcInfraEpithet = varSpcInfraEpithet;
			
			item.SpcInfraRankAuthor = varSpcInfraRankAuthor;
			
			item.SpcStockName = varSpcStockName;
			
			item.SpcStatus = varSpcStatus;
			
			item.SpcHybrid = varSpcHybrid;
			
			item.SpcEndemism = varSpcEndemism;
			
			item.SpcDistribComplete = varSpcDistribComplete;
			
			item.SpcPopSize = varSpcPopSize;
			
			item.SpcPopAccuracy = varSpcPopAccuracy;
			
			item.SpcAreaOO = varSpcAreaOO;
			
			item.SpcExtentOO = varSpcExtentOO;
			
			item.SpcOccursPA = varSpcOccursPA;
			
			item.SpcOccursBotGdn = varSpcOccursBotGdn;
			
			item.SpcFSC = varSpcFSC;
			
			item.SpcNotes = varSpcNotes;
			
			item.SpcBGBaseID = varSpcBGBaseID;
			
			item.SpcOldIUCNCat = varSpcOldIUCNCat;
			
			item.SpcMigratory = varSpcMigratory;
			
			item.SpcFreshwater = varSpcFreshwater;
			
			item.SpcMarine = varSpcMarine;
			
			item.SpcRedList1990 = varSpcRedList1990;
			
			item.SpcRedList1994 = varSpcRedList1994;
			
			item.SpcIdManual = varSpcIdManual;
			
			item.SpcLastSeen = varSpcLastSeen;
			
			item.SpcCITESAppendix = varSpcCITESAppendix;
			
			item.SpcCITESNotes = varSpcCITESNotes;
			
			item.SpcEUAnnex = varSpcEUAnnex;
			
			item.SpcAdded = varSpcAdded;
			
			item.SpcModified = varSpcModified;
			
			item.SpcByWho = varSpcByWho;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSpcRecID,int? varSpcHbtRecID,int? varSpcGenRecID,string varSpcAnimalPlant,string varSpcName,string varSpcAuthor,string varSpcInfraRank,string varSpcInfraEpithet,string varSpcInfraRankAuthor,string varSpcStockName,string varSpcStatus,string varSpcHybrid,string varSpcEndemism,string varSpcDistribComplete,string varSpcPopSize,string varSpcPopAccuracy,string varSpcAreaOO,string varSpcExtentOO,bool varSpcOccursPA,bool varSpcOccursBotGdn,bool varSpcFSC,string varSpcNotes,int? varSpcBGBaseID,string varSpcOldIUCNCat,bool varSpcMigratory,bool varSpcFreshwater,bool varSpcMarine,string varSpcRedList1990,string varSpcRedList1994,string varSpcIdManual,string varSpcLastSeen,string varSpcCITESAppendix,string varSpcCITESNotes,string varSpcEUAnnex,DateTime? varSpcAdded,DateTime? varSpcModified,int? varSpcByWho)
		{
			PSpecy item = new PSpecy();
			
				item.SpcRecID = varSpcRecID;
			
				item.SpcHbtRecID = varSpcHbtRecID;
			
				item.SpcGenRecID = varSpcGenRecID;
			
				item.SpcAnimalPlant = varSpcAnimalPlant;
			
				item.SpcName = varSpcName;
			
				item.SpcAuthor = varSpcAuthor;
			
				item.SpcInfraRank = varSpcInfraRank;
			
				item.SpcInfraEpithet = varSpcInfraEpithet;
			
				item.SpcInfraRankAuthor = varSpcInfraRankAuthor;
			
				item.SpcStockName = varSpcStockName;
			
				item.SpcStatus = varSpcStatus;
			
				item.SpcHybrid = varSpcHybrid;
			
				item.SpcEndemism = varSpcEndemism;
			
				item.SpcDistribComplete = varSpcDistribComplete;
			
				item.SpcPopSize = varSpcPopSize;
			
				item.SpcPopAccuracy = varSpcPopAccuracy;
			
				item.SpcAreaOO = varSpcAreaOO;
			
				item.SpcExtentOO = varSpcExtentOO;
			
				item.SpcOccursPA = varSpcOccursPA;
			
				item.SpcOccursBotGdn = varSpcOccursBotGdn;
			
				item.SpcFSC = varSpcFSC;
			
				item.SpcNotes = varSpcNotes;
			
				item.SpcBGBaseID = varSpcBGBaseID;
			
				item.SpcOldIUCNCat = varSpcOldIUCNCat;
			
				item.SpcMigratory = varSpcMigratory;
			
				item.SpcFreshwater = varSpcFreshwater;
			
				item.SpcMarine = varSpcMarine;
			
				item.SpcRedList1990 = varSpcRedList1990;
			
				item.SpcRedList1994 = varSpcRedList1994;
			
				item.SpcIdManual = varSpcIdManual;
			
				item.SpcLastSeen = varSpcLastSeen;
			
				item.SpcCITESAppendix = varSpcCITESAppendix;
			
				item.SpcCITESNotes = varSpcCITESNotes;
			
				item.SpcEUAnnex = varSpcEUAnnex;
			
				item.SpcAdded = varSpcAdded;
			
				item.SpcModified = varSpcModified;
			
				item.SpcByWho = varSpcByWho;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SpcRecIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcHbtRecIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcGenRecIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcAnimalPlantColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcAuthorColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcInfraRankColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcInfraEpithetColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcInfraRankAuthorColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcStockNameColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcStatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcHybridColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcEndemismColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcDistribCompleteColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcPopSizeColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcPopAccuracyColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcAreaOOColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcExtentOOColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcOccursPAColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcOccursBotGdnColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcFSCColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcNotesColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcBGBaseIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcOldIUCNCatColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcMigratoryColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcFreshwaterColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcMarineColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcRedList1990Column
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcRedList1994Column
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcIdManualColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcLastSeenColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcCITESAppendixColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcCITESNotesColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcEUAnnexColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcAddedColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcModifiedColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcByWhoColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SpcRecID = @"SpcRecID";
			 public static string SpcHbtRecID = @"SpcHbtRecID";
			 public static string SpcGenRecID = @"SpcGenRecID";
			 public static string SpcAnimalPlant = @"SpcAnimalPlant";
			 public static string SpcName = @"SpcName";
			 public static string SpcAuthor = @"SpcAuthor";
			 public static string SpcInfraRank = @"SpcInfraRank";
			 public static string SpcInfraEpithet = @"SpcInfraEpithet";
			 public static string SpcInfraRankAuthor = @"SpcInfraRankAuthor";
			 public static string SpcStockName = @"SpcStockName";
			 public static string SpcStatus = @"SpcStatus";
			 public static string SpcHybrid = @"SpcHybrid";
			 public static string SpcEndemism = @"SpcEndemism";
			 public static string SpcDistribComplete = @"SpcDistribComplete";
			 public static string SpcPopSize = @"SpcPopSize";
			 public static string SpcPopAccuracy = @"SpcPopAccuracy";
			 public static string SpcAreaOO = @"SpcAreaOO";
			 public static string SpcExtentOO = @"SpcExtentOO";
			 public static string SpcOccursPA = @"SpcOccursPA";
			 public static string SpcOccursBotGdn = @"SpcOccursBotGdn";
			 public static string SpcFSC = @"SpcFSC";
			 public static string SpcNotes = @"SpcNotes";
			 public static string SpcBGBaseID = @"SpcBGBaseID";
			 public static string SpcOldIUCNCat = @"SpcOldIUCNCat";
			 public static string SpcMigratory = @"SpcMigratory";
			 public static string SpcFreshwater = @"SpcFreshwater";
			 public static string SpcMarine = @"SpcMarine";
			 public static string SpcRedList1990 = @"SpcRedList1990";
			 public static string SpcRedList1994 = @"SpcRedList1994";
			 public static string SpcIdManual = @"SpcIdManual";
			 public static string SpcLastSeen = @"SpcLastSeen";
			 public static string SpcCITESAppendix = @"SpcCITESAppendix";
			 public static string SpcCITESNotes = @"SpcCITESNotes";
			 public static string SpcEUAnnex = @"SpcEUAnnex";
			 public static string SpcAdded = @"SpcAdded";
			 public static string SpcModified = @"SpcModified";
			 public static string SpcByWho = @"SpcByWho";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
