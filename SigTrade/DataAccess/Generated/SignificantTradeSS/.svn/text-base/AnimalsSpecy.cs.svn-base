using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSS
{
	/// <summary>
	/// Strongly-typed collection for the AnimalsSpecy class.
	/// </summary>
    [Serializable]
	public partial class AnimalsSpecyCollection : ActiveList<AnimalsSpecy, AnimalsSpecyCollection>
	{	   
		public AnimalsSpecyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AnimalsSpecyCollection</returns>
		public AnimalsSpecyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                AnimalsSpecy o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the AnimalsSpecies table.
	/// </summary>
	[Serializable]
	public partial class AnimalsSpecy : ActiveRecord<AnimalsSpecy>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public AnimalsSpecy()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public AnimalsSpecy(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public AnimalsSpecy(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public AnimalsSpecy(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AnimalsSpecies", TableType.Table, DataService.GetInstance("SignificantTradeSS"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSpcrecID = new TableSchema.TableColumn(schema);
				colvarSpcrecID.ColumnName = "SpcrecID";
				colvarSpcrecID.DataType = DbType.Int32;
				colvarSpcrecID.MaxLength = 0;
				colvarSpcrecID.AutoIncrement = false;
				colvarSpcrecID.IsNullable = true;
				colvarSpcrecID.IsPrimaryKey = false;
				colvarSpcrecID.IsForeignKey = false;
				colvarSpcrecID.IsReadOnly = false;
				colvarSpcrecID.DefaultSetting = @"";
				colvarSpcrecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcrecID);
				
				TableSchema.TableColumn colvarLegListing = new TableSchema.TableColumn(schema);
				colvarLegListing.ColumnName = "LegListing";
				colvarLegListing.DataType = DbType.String;
				colvarLegListing.MaxLength = 255;
				colvarLegListing.AutoIncrement = false;
				colvarLegListing.IsNullable = true;
				colvarLegListing.IsPrimaryKey = false;
				colvarLegListing.IsForeignKey = false;
				colvarLegListing.IsReadOnly = false;
				colvarLegListing.DefaultSetting = @"";
				colvarLegListing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLegListing);
				
				TableSchema.TableColumn colvarSpcGenRecID = new TableSchema.TableColumn(schema);
				colvarSpcGenRecID.ColumnName = "SpcGenRecID";
				colvarSpcGenRecID.DataType = DbType.Double;
				colvarSpcGenRecID.MaxLength = 0;
				colvarSpcGenRecID.AutoIncrement = false;
				colvarSpcGenRecID.IsNullable = true;
				colvarSpcGenRecID.IsPrimaryKey = false;
				colvarSpcGenRecID.IsForeignKey = false;
				colvarSpcGenRecID.IsReadOnly = false;
				colvarSpcGenRecID.DefaultSetting = @"";
				colvarSpcGenRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcGenRecID);
				
				TableSchema.TableColumn colvarSpcName = new TableSchema.TableColumn(schema);
				colvarSpcName.ColumnName = "SpcName";
				colvarSpcName.DataType = DbType.String;
				colvarSpcName.MaxLength = 255;
				colvarSpcName.AutoIncrement = false;
				colvarSpcName.IsNullable = true;
				colvarSpcName.IsPrimaryKey = false;
				colvarSpcName.IsForeignKey = false;
				colvarSpcName.IsReadOnly = false;
				colvarSpcName.DefaultSetting = @"";
				colvarSpcName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcName);
				
				TableSchema.TableColumn colvarSpcInfraEpithet = new TableSchema.TableColumn(schema);
				colvarSpcInfraEpithet.ColumnName = "SpcInfraEpithet";
				colvarSpcInfraEpithet.DataType = DbType.String;
				colvarSpcInfraEpithet.MaxLength = 255;
				colvarSpcInfraEpithet.AutoIncrement = false;
				colvarSpcInfraEpithet.IsNullable = true;
				colvarSpcInfraEpithet.IsPrimaryKey = false;
				colvarSpcInfraEpithet.IsForeignKey = false;
				colvarSpcInfraEpithet.IsReadOnly = false;
				colvarSpcInfraEpithet.DefaultSetting = @"";
				colvarSpcInfraEpithet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcInfraEpithet);
				
				TableSchema.TableColumn colvarSpcStatus = new TableSchema.TableColumn(schema);
				colvarSpcStatus.ColumnName = "SpcStatus";
				colvarSpcStatus.DataType = DbType.String;
				colvarSpcStatus.MaxLength = 255;
				colvarSpcStatus.AutoIncrement = false;
				colvarSpcStatus.IsNullable = true;
				colvarSpcStatus.IsPrimaryKey = false;
				colvarSpcStatus.IsForeignKey = false;
				colvarSpcStatus.IsReadOnly = false;
				colvarSpcStatus.DefaultSetting = @"";
				colvarSpcStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpcStatus);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SignificantTradeSS"].AddSchema("AnimalsSpecies",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SpcrecID")]
		[Bindable(true)]
		public int? SpcrecID 
		{
			get { return GetColumnValue<int?>(Columns.SpcrecID); }
			set { SetColumnValue(Columns.SpcrecID, value); }
		}
		  
		[XmlAttribute("LegListing")]
		[Bindable(true)]
		public string LegListing 
		{
			get { return GetColumnValue<string>(Columns.LegListing); }
			set { SetColumnValue(Columns.LegListing, value); }
		}
		  
		[XmlAttribute("SpcGenRecID")]
		[Bindable(true)]
		public double? SpcGenRecID 
		{
			get { return GetColumnValue<double?>(Columns.SpcGenRecID); }
			set { SetColumnValue(Columns.SpcGenRecID, value); }
		}
		  
		[XmlAttribute("SpcName")]
		[Bindable(true)]
		public string SpcName 
		{
			get { return GetColumnValue<string>(Columns.SpcName); }
			set { SetColumnValue(Columns.SpcName, value); }
		}
		  
		[XmlAttribute("SpcInfraEpithet")]
		[Bindable(true)]
		public string SpcInfraEpithet 
		{
			get { return GetColumnValue<string>(Columns.SpcInfraEpithet); }
			set { SetColumnValue(Columns.SpcInfraEpithet, value); }
		}
		  
		[XmlAttribute("SpcStatus")]
		[Bindable(true)]
		public string SpcStatus 
		{
			get { return GetColumnValue<string>(Columns.SpcStatus); }
			set { SetColumnValue(Columns.SpcStatus, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varSpcrecID,string varLegListing,double? varSpcGenRecID,string varSpcName,string varSpcInfraEpithet,string varSpcStatus)
		{
			AnimalsSpecy item = new AnimalsSpecy();
			
			item.SpcrecID = varSpcrecID;
			
			item.LegListing = varLegListing;
			
			item.SpcGenRecID = varSpcGenRecID;
			
			item.SpcName = varSpcName;
			
			item.SpcInfraEpithet = varSpcInfraEpithet;
			
			item.SpcStatus = varSpcStatus;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varSpcrecID,string varLegListing,double? varSpcGenRecID,string varSpcName,string varSpcInfraEpithet,string varSpcStatus)
		{
			AnimalsSpecy item = new AnimalsSpecy();
			
				item.Id = varId;
			
				item.SpcrecID = varSpcrecID;
			
				item.LegListing = varLegListing;
			
				item.SpcGenRecID = varSpcGenRecID;
			
				item.SpcName = varSpcName;
			
				item.SpcInfraEpithet = varSpcInfraEpithet;
			
				item.SpcStatus = varSpcStatus;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcrecIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LegListingColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcGenRecIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcInfraEpithetColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SpcStatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string SpcrecID = @"SpcrecID";
			 public static string LegListing = @"LegListing";
			 public static string SpcGenRecID = @"SpcGenRecID";
			 public static string SpcName = @"SpcName";
			 public static string SpcInfraEpithet = @"SpcInfraEpithet";
			 public static string SpcStatus = @"SpcStatus";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
