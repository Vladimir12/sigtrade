using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSS
{
	/// <summary>
	/// Strongly-typed collection for the ParagraphAction class.
	/// </summary>
    [Serializable]
	public partial class ParagraphActionCollection : ActiveList<ParagraphAction, ParagraphActionCollection>
	{	   
		public ParagraphActionCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ParagraphActionCollection</returns>
		public ParagraphActionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ParagraphAction o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ParagraphAction table.
	/// </summary>
	[Serializable]
	public partial class ParagraphAction : ActiveRecord<ParagraphAction>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ParagraphAction()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ParagraphAction(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ParagraphAction(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ParagraphAction(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ParagraphAction", TableType.Table, DataService.GetInstance("SignificantTradeSS"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPALibID = new TableSchema.TableColumn(schema);
				colvarPALibID.ColumnName = "PALibID";
				colvarPALibID.DataType = DbType.Int32;
				colvarPALibID.MaxLength = 0;
				colvarPALibID.AutoIncrement = false;
				colvarPALibID.IsNullable = true;
				colvarPALibID.IsPrimaryKey = false;
				colvarPALibID.IsForeignKey = false;
				colvarPALibID.IsReadOnly = false;
				colvarPALibID.DefaultSetting = @"";
				colvarPALibID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPALibID);
				
				TableSchema.TableColumn colvarDateStarted = new TableSchema.TableColumn(schema);
				colvarDateStarted.ColumnName = "DateStarted";
				colvarDateStarted.DataType = DbType.DateTime;
				colvarDateStarted.MaxLength = 0;
				colvarDateStarted.AutoIncrement = false;
				colvarDateStarted.IsNullable = true;
				colvarDateStarted.IsPrimaryKey = false;
				colvarDateStarted.IsForeignKey = false;
				colvarDateStarted.IsReadOnly = false;
				colvarDateStarted.DefaultSetting = @"";
				colvarDateStarted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateStarted);
				
				TableSchema.TableColumn colvarDeadlineDate = new TableSchema.TableColumn(schema);
				colvarDeadlineDate.ColumnName = "DeadlineDate";
				colvarDeadlineDate.DataType = DbType.DateTime;
				colvarDeadlineDate.MaxLength = 0;
				colvarDeadlineDate.AutoIncrement = false;
				colvarDeadlineDate.IsNullable = true;
				colvarDeadlineDate.IsPrimaryKey = false;
				colvarDeadlineDate.IsForeignKey = false;
				colvarDeadlineDate.IsReadOnly = false;
				colvarDeadlineDate.DefaultSetting = @"";
				colvarDeadlineDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeadlineDate);
				
				TableSchema.TableColumn colvarCommitteeID = new TableSchema.TableColumn(schema);
				colvarCommitteeID.ColumnName = "CommitteeID";
				colvarCommitteeID.DataType = DbType.Int32;
				colvarCommitteeID.MaxLength = 0;
				colvarCommitteeID.AutoIncrement = false;
				colvarCommitteeID.IsNullable = true;
				colvarCommitteeID.IsPrimaryKey = false;
				colvarCommitteeID.IsForeignKey = false;
				colvarCommitteeID.IsReadOnly = false;
				colvarCommitteeID.DefaultSetting = @"";
				colvarCommitteeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommitteeID);
				
				TableSchema.TableColumn colvarMeetingID = new TableSchema.TableColumn(schema);
				colvarMeetingID.ColumnName = "MeetingID";
				colvarMeetingID.DataType = DbType.Int32;
				colvarMeetingID.MaxLength = 0;
				colvarMeetingID.AutoIncrement = false;
				colvarMeetingID.IsNullable = true;
				colvarMeetingID.IsPrimaryKey = false;
				colvarMeetingID.IsForeignKey = false;
				colvarMeetingID.IsReadOnly = false;
				colvarMeetingID.DefaultSetting = @"";
				colvarMeetingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeetingID);
				
				TableSchema.TableColumn colvarReviewID = new TableSchema.TableColumn(schema);
				colvarReviewID.ColumnName = "ReviewID";
				colvarReviewID.DataType = DbType.Int32;
				colvarReviewID.MaxLength = 0;
				colvarReviewID.AutoIncrement = false;
				colvarReviewID.IsNullable = true;
				colvarReviewID.IsPrimaryKey = false;
				colvarReviewID.IsForeignKey = false;
				colvarReviewID.IsReadOnly = false;
				colvarReviewID.DefaultSetting = @"";
				colvarReviewID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReviewID);
				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Boolean;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = false;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
						colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				TableSchema.TableColumn colvarCompleted = new TableSchema.TableColumn(schema);
				colvarCompleted.ColumnName = "Completed";
				colvarCompleted.DataType = DbType.Boolean;
				colvarCompleted.MaxLength = 0;
				colvarCompleted.AutoIncrement = false;
				colvarCompleted.IsNullable = false;
				colvarCompleted.IsPrimaryKey = false;
				colvarCompleted.IsForeignKey = false;
				colvarCompleted.IsReadOnly = false;
				
						colvarCompleted.DefaultSetting = @"((0))";
				colvarCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleted);
				
				TableSchema.TableColumn colvarCompletedDate = new TableSchema.TableColumn(schema);
				colvarCompletedDate.ColumnName = "CompletedDate";
				colvarCompletedDate.DataType = DbType.DateTime;
				colvarCompletedDate.MaxLength = 0;
				colvarCompletedDate.AutoIncrement = false;
				colvarCompletedDate.IsNullable = true;
				colvarCompletedDate.IsPrimaryKey = false;
				colvarCompletedDate.IsForeignKey = false;
				colvarCompletedDate.IsReadOnly = false;
				colvarCompletedDate.DefaultSetting = @"";
				colvarCompletedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedDate);
				
				TableSchema.TableColumn colvarDateAdded = new TableSchema.TableColumn(schema);
				colvarDateAdded.ColumnName = "DateAdded";
				colvarDateAdded.DataType = DbType.DateTime;
				colvarDateAdded.MaxLength = 0;
				colvarDateAdded.AutoIncrement = false;
				colvarDateAdded.IsNullable = true;
				colvarDateAdded.IsPrimaryKey = false;
				colvarDateAdded.IsForeignKey = false;
				colvarDateAdded.IsReadOnly = false;
				colvarDateAdded.DefaultSetting = @"";
				colvarDateAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateAdded);
				
				TableSchema.TableColumn colvarDateModified = new TableSchema.TableColumn(schema);
				colvarDateModified.ColumnName = "DateModified";
				colvarDateModified.DataType = DbType.DateTime;
				colvarDateModified.MaxLength = 0;
				colvarDateModified.AutoIncrement = false;
				colvarDateModified.IsNullable = true;
				colvarDateModified.IsPrimaryKey = false;
				colvarDateModified.IsForeignKey = false;
				colvarDateModified.IsReadOnly = false;
				colvarDateModified.DefaultSetting = @"";
				colvarDateModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateModified);
				
				TableSchema.TableColumn colvarConcernID = new TableSchema.TableColumn(schema);
				colvarConcernID.ColumnName = "ConcernID";
				colvarConcernID.DataType = DbType.Int32;
				colvarConcernID.MaxLength = 0;
				colvarConcernID.AutoIncrement = false;
				colvarConcernID.IsNullable = true;
				colvarConcernID.IsPrimaryKey = false;
				colvarConcernID.IsForeignKey = false;
				colvarConcernID.IsReadOnly = false;
				colvarConcernID.DefaultSetting = @"";
				colvarConcernID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConcernID);
				
				TableSchema.TableColumn colvarCurrentConcern = new TableSchema.TableColumn(schema);
				colvarCurrentConcern.ColumnName = "CurrentConcern";
				colvarCurrentConcern.DataType = DbType.Boolean;
				colvarCurrentConcern.MaxLength = 0;
				colvarCurrentConcern.AutoIncrement = false;
				colvarCurrentConcern.IsNullable = true;
				colvarCurrentConcern.IsPrimaryKey = false;
				colvarCurrentConcern.IsForeignKey = false;
				colvarCurrentConcern.IsReadOnly = false;
				
						colvarCurrentConcern.DefaultSetting = @"((1))";
				colvarCurrentConcern.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentConcern);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SignificantTradeSS"].AddSchema("ParagraphAction",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("PALibID")]
		[Bindable(true)]
		public int? PALibID 
		{
			get { return GetColumnValue<int?>(Columns.PALibID); }
			set { SetColumnValue(Columns.PALibID, value); }
		}
		  
		[XmlAttribute("DateStarted")]
		[Bindable(true)]
		public DateTime? DateStarted 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateStarted); }
			set { SetColumnValue(Columns.DateStarted, value); }
		}
		  
		[XmlAttribute("DeadlineDate")]
		[Bindable(true)]
		public DateTime? DeadlineDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeadlineDate); }
			set { SetColumnValue(Columns.DeadlineDate, value); }
		}
		  
		[XmlAttribute("CommitteeID")]
		[Bindable(true)]
		public int? CommitteeID 
		{
			get { return GetColumnValue<int?>(Columns.CommitteeID); }
			set { SetColumnValue(Columns.CommitteeID, value); }
		}
		  
		[XmlAttribute("MeetingID")]
		[Bindable(true)]
		public int? MeetingID 
		{
			get { return GetColumnValue<int?>(Columns.MeetingID); }
			set { SetColumnValue(Columns.MeetingID, value); }
		}
		  
		[XmlAttribute("ReviewID")]
		[Bindable(true)]
		public int? ReviewID 
		{
			get { return GetColumnValue<int?>(Columns.ReviewID); }
			set { SetColumnValue(Columns.ReviewID, value); }
		}
		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public bool Deleted 
		{
			get { return GetColumnValue<bool>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		  
		[XmlAttribute("Completed")]
		[Bindable(true)]
		public bool Completed 
		{
			get { return GetColumnValue<bool>(Columns.Completed); }
			set { SetColumnValue(Columns.Completed, value); }
		}
		  
		[XmlAttribute("CompletedDate")]
		[Bindable(true)]
		public DateTime? CompletedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CompletedDate); }
			set { SetColumnValue(Columns.CompletedDate, value); }
		}
		  
		[XmlAttribute("DateAdded")]
		[Bindable(true)]
		public DateTime? DateAdded 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateAdded); }
			set { SetColumnValue(Columns.DateAdded, value); }
		}
		  
		[XmlAttribute("DateModified")]
		[Bindable(true)]
		public DateTime? DateModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateModified); }
			set { SetColumnValue(Columns.DateModified, value); }
		}
		  
		[XmlAttribute("ConcernID")]
		[Bindable(true)]
		public int? ConcernID 
		{
			get { return GetColumnValue<int?>(Columns.ConcernID); }
			set { SetColumnValue(Columns.ConcernID, value); }
		}
		  
		[XmlAttribute("CurrentConcern")]
		[Bindable(true)]
		public bool? CurrentConcern 
		{
			get { return GetColumnValue<bool?>(Columns.CurrentConcern); }
			set { SetColumnValue(Columns.CurrentConcern, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPALibID,DateTime? varDateStarted,DateTime? varDeadlineDate,int? varCommitteeID,int? varMeetingID,int? varReviewID,bool varDeleted,bool varCompleted,DateTime? varCompletedDate,DateTime? varDateAdded,DateTime? varDateModified,int? varConcernID,bool? varCurrentConcern)
		{
			ParagraphAction item = new ParagraphAction();
			
			item.PALibID = varPALibID;
			
			item.DateStarted = varDateStarted;
			
			item.DeadlineDate = varDeadlineDate;
			
			item.CommitteeID = varCommitteeID;
			
			item.MeetingID = varMeetingID;
			
			item.ReviewID = varReviewID;
			
			item.Deleted = varDeleted;
			
			item.Completed = varCompleted;
			
			item.CompletedDate = varCompletedDate;
			
			item.DateAdded = varDateAdded;
			
			item.DateModified = varDateModified;
			
			item.ConcernID = varConcernID;
			
			item.CurrentConcern = varCurrentConcern;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varPALibID,DateTime? varDateStarted,DateTime? varDeadlineDate,int? varCommitteeID,int? varMeetingID,int? varReviewID,bool varDeleted,bool varCompleted,DateTime? varCompletedDate,DateTime? varDateAdded,DateTime? varDateModified,int? varConcernID,bool? varCurrentConcern)
		{
			ParagraphAction item = new ParagraphAction();
			
				item.Id = varId;
			
				item.PALibID = varPALibID;
			
				item.DateStarted = varDateStarted;
			
				item.DeadlineDate = varDeadlineDate;
			
				item.CommitteeID = varCommitteeID;
			
				item.MeetingID = varMeetingID;
			
				item.ReviewID = varReviewID;
			
				item.Deleted = varDeleted;
			
				item.Completed = varCompleted;
			
				item.CompletedDate = varCompletedDate;
			
				item.DateAdded = varDateAdded;
			
				item.DateModified = varDateModified;
			
				item.ConcernID = varConcernID;
			
				item.CurrentConcern = varCurrentConcern;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PALibIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DateStartedColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DeadlineDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CommitteeIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MeetingIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReviewIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CompletedDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DateAddedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DateModifiedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ConcernIDColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentConcernColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string PALibID = @"PALibID";
			 public static string DateStarted = @"DateStarted";
			 public static string DeadlineDate = @"DeadlineDate";
			 public static string CommitteeID = @"CommitteeID";
			 public static string MeetingID = @"MeetingID";
			 public static string ReviewID = @"ReviewID";
			 public static string Deleted = @"Deleted";
			 public static string Completed = @"Completed";
			 public static string CompletedDate = @"CompletedDate";
			 public static string DateAdded = @"DateAdded";
			 public static string DateModified = @"DateModified";
			 public static string ConcernID = @"ConcernID";
			 public static string CurrentConcern = @"CurrentConcern";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
