using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SignificantTradeSS
{
	/// <summary>
	/// Strongly-typed collection for the AKingdom class.
	/// </summary>
    [Serializable]
	public partial class AKingdomCollection : ActiveList<AKingdom, AKingdomCollection>
	{	   
		public AKingdomCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>AKingdomCollection</returns>
		public AKingdomCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                AKingdom o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the AKingdom table.
	/// </summary>
	[Serializable]
	public partial class AKingdom : ActiveRecord<AKingdom>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public AKingdom()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public AKingdom(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public AKingdom(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public AKingdom(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AKingdom", TableType.Table, DataService.GetInstance("SignificantTradeSS"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarKgmRecID = new TableSchema.TableColumn(schema);
				colvarKgmRecID.ColumnName = "KgmRecID";
				colvarKgmRecID.DataType = DbType.Int32;
				colvarKgmRecID.MaxLength = 0;
				colvarKgmRecID.AutoIncrement = false;
				colvarKgmRecID.IsNullable = false;
				colvarKgmRecID.IsPrimaryKey = true;
				colvarKgmRecID.IsForeignKey = false;
				colvarKgmRecID.IsReadOnly = false;
				colvarKgmRecID.DefaultSetting = @"";
				colvarKgmRecID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmRecID);
				
				TableSchema.TableColumn colvarKgmName = new TableSchema.TableColumn(schema);
				colvarKgmName.ColumnName = "KgmName";
				colvarKgmName.DataType = DbType.String;
				colvarKgmName.MaxLength = 50;
				colvarKgmName.AutoIncrement = false;
				colvarKgmName.IsNullable = true;
				colvarKgmName.IsPrimaryKey = false;
				colvarKgmName.IsForeignKey = false;
				colvarKgmName.IsReadOnly = false;
				colvarKgmName.DefaultSetting = @"";
				colvarKgmName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmName);
				
				TableSchema.TableColumn colvarKgmCommonName = new TableSchema.TableColumn(schema);
				colvarKgmCommonName.ColumnName = "KgmCommonName";
				colvarKgmCommonName.DataType = DbType.String;
				colvarKgmCommonName.MaxLength = 30;
				colvarKgmCommonName.AutoIncrement = false;
				colvarKgmCommonName.IsNullable = true;
				colvarKgmCommonName.IsPrimaryKey = false;
				colvarKgmCommonName.IsForeignKey = false;
				colvarKgmCommonName.IsReadOnly = false;
				colvarKgmCommonName.DefaultSetting = @"";
				colvarKgmCommonName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmCommonName);
				
				TableSchema.TableColumn colvarKgmDateListed = new TableSchema.TableColumn(schema);
				colvarKgmDateListed.ColumnName = "KgmDateListed";
				colvarKgmDateListed.DataType = DbType.DateTime;
				colvarKgmDateListed.MaxLength = 0;
				colvarKgmDateListed.AutoIncrement = false;
				colvarKgmDateListed.IsNullable = true;
				colvarKgmDateListed.IsPrimaryKey = false;
				colvarKgmDateListed.IsForeignKey = false;
				colvarKgmDateListed.IsReadOnly = false;
				colvarKgmDateListed.DefaultSetting = @"";
				colvarKgmDateListed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmDateListed);
				
				TableSchema.TableColumn colvarKgmAdded = new TableSchema.TableColumn(schema);
				colvarKgmAdded.ColumnName = "KgmAdded";
				colvarKgmAdded.DataType = DbType.DateTime;
				colvarKgmAdded.MaxLength = 0;
				colvarKgmAdded.AutoIncrement = false;
				colvarKgmAdded.IsNullable = true;
				colvarKgmAdded.IsPrimaryKey = false;
				colvarKgmAdded.IsForeignKey = false;
				colvarKgmAdded.IsReadOnly = false;
				colvarKgmAdded.DefaultSetting = @"";
				colvarKgmAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmAdded);
				
				TableSchema.TableColumn colvarKgmModified = new TableSchema.TableColumn(schema);
				colvarKgmModified.ColumnName = "KgmModified";
				colvarKgmModified.DataType = DbType.DateTime;
				colvarKgmModified.MaxLength = 0;
				colvarKgmModified.AutoIncrement = false;
				colvarKgmModified.IsNullable = true;
				colvarKgmModified.IsPrimaryKey = false;
				colvarKgmModified.IsForeignKey = false;
				colvarKgmModified.IsReadOnly = false;
				colvarKgmModified.DefaultSetting = @"";
				colvarKgmModified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmModified);
				
				TableSchema.TableColumn colvarKgmByWho = new TableSchema.TableColumn(schema);
				colvarKgmByWho.ColumnName = "KgmByWho";
				colvarKgmByWho.DataType = DbType.Int32;
				colvarKgmByWho.MaxLength = 0;
				colvarKgmByWho.AutoIncrement = false;
				colvarKgmByWho.IsNullable = true;
				colvarKgmByWho.IsPrimaryKey = false;
				colvarKgmByWho.IsForeignKey = false;
				colvarKgmByWho.IsReadOnly = false;
				colvarKgmByWho.DefaultSetting = @"";
				colvarKgmByWho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKgmByWho);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["SignificantTradeSS"].AddSchema("AKingdom",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("KgmRecID")]
		[Bindable(true)]
		public int KgmRecID 
		{
			get { return GetColumnValue<int>(Columns.KgmRecID); }
			set { SetColumnValue(Columns.KgmRecID, value); }
		}
		  
		[XmlAttribute("KgmName")]
		[Bindable(true)]
		public string KgmName 
		{
			get { return GetColumnValue<string>(Columns.KgmName); }
			set { SetColumnValue(Columns.KgmName, value); }
		}
		  
		[XmlAttribute("KgmCommonName")]
		[Bindable(true)]
		public string KgmCommonName 
		{
			get { return GetColumnValue<string>(Columns.KgmCommonName); }
			set { SetColumnValue(Columns.KgmCommonName, value); }
		}
		  
		[XmlAttribute("KgmDateListed")]
		[Bindable(true)]
		public DateTime? KgmDateListed 
		{
			get { return GetColumnValue<DateTime?>(Columns.KgmDateListed); }
			set { SetColumnValue(Columns.KgmDateListed, value); }
		}
		  
		[XmlAttribute("KgmAdded")]
		[Bindable(true)]
		public DateTime? KgmAdded 
		{
			get { return GetColumnValue<DateTime?>(Columns.KgmAdded); }
			set { SetColumnValue(Columns.KgmAdded, value); }
		}
		  
		[XmlAttribute("KgmModified")]
		[Bindable(true)]
		public DateTime? KgmModified 
		{
			get { return GetColumnValue<DateTime?>(Columns.KgmModified); }
			set { SetColumnValue(Columns.KgmModified, value); }
		}
		  
		[XmlAttribute("KgmByWho")]
		[Bindable(true)]
		public int? KgmByWho 
		{
			get { return GetColumnValue<int?>(Columns.KgmByWho); }
			set { SetColumnValue(Columns.KgmByWho, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varKgmRecID,string varKgmName,string varKgmCommonName,DateTime? varKgmDateListed,DateTime? varKgmAdded,DateTime? varKgmModified,int? varKgmByWho)
		{
			AKingdom item = new AKingdom();
			
			item.KgmRecID = varKgmRecID;
			
			item.KgmName = varKgmName;
			
			item.KgmCommonName = varKgmCommonName;
			
			item.KgmDateListed = varKgmDateListed;
			
			item.KgmAdded = varKgmAdded;
			
			item.KgmModified = varKgmModified;
			
			item.KgmByWho = varKgmByWho;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varKgmRecID,string varKgmName,string varKgmCommonName,DateTime? varKgmDateListed,DateTime? varKgmAdded,DateTime? varKgmModified,int? varKgmByWho)
		{
			AKingdom item = new AKingdom();
			
				item.KgmRecID = varKgmRecID;
			
				item.KgmName = varKgmName;
			
				item.KgmCommonName = varKgmCommonName;
			
				item.KgmDateListed = varKgmDateListed;
			
				item.KgmAdded = varKgmAdded;
			
				item.KgmModified = varKgmModified;
			
				item.KgmByWho = varKgmByWho;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn KgmRecIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmCommonNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmDateListedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmAddedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmModifiedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn KgmByWhoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string KgmRecID = @"KgmRecID";
			 public static string KgmName = @"KgmName";
			 public static string KgmCommonName = @"KgmCommonName";
			 public static string KgmDateListed = @"KgmDateListed";
			 public static string KgmAdded = @"KgmAdded";
			 public static string KgmModified = @"KgmModified";
			 public static string KgmByWho = @"KgmByWho";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
